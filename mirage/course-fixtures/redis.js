export default {
  "slug": "redis",
  "name": "Build your own Redis",
  "short_name": "Redis",
  "release_status": "live",
  "description_md": "Redis is an in-memory data structure store often used as a database, cache, message broker and streaming engine. In this challenge\nyou'll build your own Redis server that is capable of serving basic commands, reading RDB files and more.\n\nAlong the way, you'll learn about TCP servers, the Redis Protocol and more.",
  "short_description_md": "Learn about TCP servers, the Redis protocol and more",
  "completion_percentage": 30,
  "concept_slugs": [
    "network-protocols",
    "tcp-overview"
  ],
  "languages": [
    {
      "slug": "c"
    },
    {
      "slug": "clojure"
    },
    {
      "slug": "cpp"
    },
    {
      "slug": "crystal"
    },
    {
      "slug": "csharp"
    },
    {
      "slug": "elixir"
    },
    {
      "slug": "gleam"
    },
    {
      "slug": "go"
    },
    {
      "slug": "haskell"
    },
    {
      "slug": "java"
    },
    {
      "slug": "javascript"
    },
    {
      "slug": "kotlin"
    },
    {
      "slug": "ocaml"
    },
    {
      "slug": "php"
    },
    {
      "slug": "python"
    },
    {
      "slug": "ruby"
    },
    {
      "slug": "rust"
    },
    {
      "slug": "typescript"
    },
    {
      "slug": "scala"
    },
    {
      "slug": "swift",
      "release_status": "alpha",
      "alpha_tester_usernames": [
        "JWShroyer"
      ]
    },
    {
      "slug": "zig"
    }
  ],
  "marketing": {
    "difficulty": "medium",
    "sample_extension_idea_title": "Persistence",
    "sample_extension_idea_description": "A Redis server that can read and write .rdb files",
    "testimonials": [
      {
        "author_name": "Charles Guo",
        "author_description": "Software Engineer, Stripe",
        "author_avatar": "https://codecrafters.io/images/external/testimonials/charles-guo.png",
        "link": "https://github.com/shaldengeki",
        "text": "The Redis challenge was extremely fun. I ended up having to read the\nRedis Protocol specification doc pretty carefully in its entirety! The result\nfelt like lightly-guided independent study, if that makes sense. (Which, again, was lots of fun)"
      },
      {
        "author_name": "Patrick Burris",
        "author_description": "Senior Software Developer, CenturyLink",
        "author_avatar": "https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg",
        "link": "https://github.com/Jumballaya",
        "text": "I think the instant feedback right there in the git push is really cool.\nDidn't even know that was possible!"
      }
    ]
  },
  "extensions": [
    {
      "slug": "persistence-rdb",
      "name": "RDB Persistence",
      "description_markdown": "In this challenge extension you'll add [persistence][redis-persistence] support to your Redis implementation.\n\nAlong the way you'll learn about Redis's [RDB file format][rdb-file-format] and more.\n\n[redis-persistence]: https://redis.io/docs/manual/persistence/\n[rdb-file-format]: https://github.com/sripathikrishnan/redis-rdb-tools/blob/548b11ec3c81a603f5b321228d07a61a0b940159/docs/RDB_File_Format.textile\n"
    },
    {
      "slug": "replication",
      "name": "Replication",
      "description_markdown": "In this challenge extension you'll add support for [Replication][redis-replication] to your Redis implementation.\n\nAlong the way you'll learn about how Redis's leader-follower replication works, the [PSYNC][redis-psync-command] command and more.\n\n[redis-replication]: https://redis.io/docs/management/replication/\n[redis-psync-command]: https://redis.io/commands/psync/\n"
    },
    {
      "slug": "streams",
      "name": "Streams",
      "description_markdown": "In this challenge extension you'll add support for the [Stream][redis-streams-data-type] data type to your Redis implementation.\n\nAlong the way you'll learn about commands like [XADD][xadd-command], [XRANGE][xrange-command] and more.\n\n[redis-streams-data-type]: https://redis.io/docs/data-types/streams/\n[xadd-command]: https://redis.io/commands/xadd/\n[xrange-command]: https://redis.io/commands/xrange/"
    },
    {
      "slug": "transactions",
      "name": "Transactions",
      "description_markdown": "In this challenge extension you'll add support for [Transactions][redis-transactions] to your Redis implementation.\n\nAlong the way, you'll learn about the [MULTI][multi-command], [EXEC][exec-command], and [DISCARD][discard-command] commands, as well as how Redis handles transactions atomically.\n\n[redis-transactions]: https://redis.io/docs/latest/develop/interact/transactions/\n[multi-command]: https://redis.io/commands/multi/\n[exec-command]: https://redis.io/commands/exec/\n[discard-command]: https://redis.io/commands/discard/"
    }
  ],
  "stages": [
    {
      "slug": "jm1",
      "concept_slugs": [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server"
      ],
      "name": "Bind to a port",
      "description_md": "In this stage, you'll implement a TCP server that listens on port 6379.\n\n[TCP](https://en.wikipedia.org/wiki/Transmission_Control_Protocol) is the underlying protocol used by protocols like HTTP, SSH and others\nyou're probably familiar with. Redis clients & servers use TCP to communicate with each other.\n\nDon't worry if you're unfamiliar with the TCP protocol, or what Redis clients & servers are. You'll learn more about this in the\nnext stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then try to connect to your TCP server on port 6379. If the connection succeeds, you'll pass this stage.\n\n### Notes\n\n- 6379 is the default port that Redis uses.\n- If you already have a Redis server running on your machine and listening on port 6379, you'll see a \"port already in use\" error when running your code. Try stopping the existing Redis server and running your code again.\n\n{{#reader_is_bot}}\n- In this stage, you can assume that you only need to handle a single client. We'll get to handling multiple clients & multiple requests per client in later stages.\n{{/reader_is_bot}}",
      "difficulty": "very_easy",
      "marketing_md": "In this stage, you'll start a TCP server on port 6379, which is the\ndefault port that Redis uses.",
      "tester_source_code_url": "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_bind.go#L11"
    },
    {
      "slug": "rg2",
      "concept_slugs": [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server"
      ],
      "name": "Respond to PING",
      "difficulty": "easy",
      "description_md": "In this stage, you'll implement support for the [PING](https://redis.io/commands/ping) command.\n\nRedis clients communicate with Redis servers by sending \"[commands](https://redis.io/commands/)\". For each command, a Redis server sends a response back to the client.\nCommands and responses are both encoded using the [Redis protocol](https://redis.io/topics/protocol) (we'll learn more about this in later stages).\n\n[PING](https://redis.io/commands/ping/) is one of the simplest Redis commands. It's used to check whether a Redis server is healthy.\n\nThe response for the `PING` command is `+PONG\\r\\n`. This is the string \"PONG\" encoded using the [Redis protocol](https://redis.io/docs/reference/protocol-spec/).\n\nIn this stage, we'll cut corners by ignoring client input and hardcoding `+PONG\\r\\n` as a response. We'll learn to parse client input in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send a `PING` command to your server and expect a `+PONG\\r\\n` response.\n\n```bash\n$ redis-cli PING\n```\n\nYour server should respond with `+PONG\\r\\n`, which is \"PONG\" encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#resp-simple-strings).\n\n### Notes\n\n- You can ignore the data that the tester sends you for this stage. We'll get to parsing\nclient input in later stages. For now, you can just hardcode `+PONG\\r\\n` as the response.\n- You can also ignore handling multiple clients and handling multiple PING commands in the stage, we'll get to that in later stages.\n- The exact bytes your program will receive won't be just `PING`, you'll receive something like this: `*1\\r\\n$4\\r\\nPING\\r\\n`,\nwhich is the Redis protocol encoding of the `PING` command. We'll learn more about this in later stages.",
      "marketing_md": "In this stage, you'll respond to the\n[PING](https://redis.io/commands/ping) command. You'll use [the Redis\nprotocol](https://redis.io/topics/protocol) to encode the reply.\n",
      "tester_source_code_url": "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L9"
    },
    {
      "slug": "wy1",
      "concept_slugs": [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server"
      ],
      "name": "Respond to multiple PINGs",
      "difficulty": "easy",
      "description_md": "In this stage, you'll respond to multiple\n[PING](https://redis.io/commands/ping) commands sent by the same connection.\n\nA Redis server starts to listen for the next command as soon as it's done responding to the previous one. This allows\nRedis clients to send multiple commands using the same connection.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send multiple PING commands using the same connection. For example, it might send:\n\n```bash\n$ echo -e \"PING\\nPING\" | redis-cli\n```\n\nThe tester will expect to receive multiple `+PONG\\r\\n` responses (one for each command sent).\n\n{{#lang_is_javascript}}\nIn most languages, you'd need to run a loop that reads input from a connection and sends a\nresponse back. In JavaScript however, if you're listening to the\n[`data`](https://nodejs.org/api/net.html#net_event_data) event, this should be automatically handled for you. **It\nis very likely that the code you had for the previous stage will pass this stage without any changes!**\n{{/lang_is_javascript}}\n\n{{^lang_is_javascript}}\nYou'll need to run a loop that reads input from a connection and sends a\nresponse back.\n{{/lang_is_javascript}}\n\n### Notes\n\n- Just like the previous stage, you can hardcode `+PONG\\r\\n` as the response for this stage. We'll get to parsing\n client input in later stages.\n- The PING commands will be sent using the same connection. We'll get to handling multiple connections in later stages.",
      "marketing_md": "In this stage, you'll respond to multiple\n[PING](https://redis.io/commands/ping) commands sent by the same client.",
      "tester_source_code_url": "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L35"
    },
    {
      "slug": "zu2",
      "concept_slugs": [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server"
      ],
      "name": "Handle concurrent clients",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for multiple concurrent clients.\n\nIn addition to handling multiple commands from the same client, Redis servers are also designed to handle multiple clients at once.\n\n{{#lang_is_javascript}}\nIn most languages, you'd need to either use threads or implement an\n[Event Loop](https://en.wikipedia.org/wiki/Event_loop) to do this. In JavaScript however, since [the concurrency\nmodel itself is based on an event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop), most\nstandard library functions are designed to support this kind of concurrent behaviour out of the box. **It is very\nlikely that the code you had for the previous stage will pass this stage without any changes!**\n{{/lang_is_javascript}}\n\n{{^lang_is_javascript}}\nTo implement this, you'll need to either use threads, or, if you're feeling\nadventurous, an [Event Loop](https://en.wikipedia.org/wiki/Event_loop) (like\nthe official Redis implementation does).\n{{/lang_is_javascript}}\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send two PING commands concurrently using two different connections:\n\n```bash\n# These two will be sent concurrently so that we test your server's ability to handle concurrent clients.\n$ redis-cli PING\n$ redis-cli PING\n```\n\nThe tester will expect to receive two `+PONG\\r\\n` responses.\n\n### Notes\n\n- Since the tester client _only_ sends the PING command at the moment, it's okay to\n  ignore what the client sends and hardcode a response. We'll get to parsing\n  client input in later stages.",
      "marketing_md": "In this stage, you'll add support for multiple concurrent clients to your\nRedis server. To achieve this you'll use an [Event\nLoop](https://en.wikipedia.org/wiki/Event_loop),\nlike the official Redis implementation does.",
      "tester_source_code_url": "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L56"
    },
    {
      "slug": "qq0",
      "name": "Implement the ECHO command",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for the [ECHO](https://redis.io/commands/echo) command.\n\n`ECHO` is a command like `PING` that's used for testing and debugging. It accepts a single argument and returns it back as a\nRESP bulk string.\n\n```bash\n$ redis-cli PING # The command you implemented in previous stages\nPONG\n$ redis-cli ECHO hey # The command you'll implement in this stage\nhey\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send an `ECHO` command with an argument to your server:\n\n```bash\n$ redis-cli ECHO hey\n```\n\nThe tester will expect to receive `$3\\r\\nhey\\r\\n` as a response (that's the string `hey` encoded as a [RESP bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings).\n\n### Notes\n\n- We suggest that you implement a proper Redis protocol parser in this stage. It'll come in handy in later stages.\n- Redis command names are case-insensitive, so `ECHO`, `echo` and `EcHo` are all valid commands.\n- The tester will send a random string as an argument to the `ECHO` command, so you won't be able to hardcode the response to pass this stage.\n- The exact bytes your program will receive won't be just `ECHO hey`, you'll receive something like this: `*2\\r\\n$4\\r\\nECHO\\r\\n$3\\r\\nhey\\r\\n`. That's\n  `[\"ECHO\", \"hey\"]` encoded using the [Redis protocol](https://redis.io/docs/reference/protocol-spec/).\n- You can read more about how \"commands\" are handled in the Redis protocol [here](https://redis.io/docs/reference/protocol-spec/#sending-commands-to-a-redis-server).",
      "marketing_md": "In this stage, you'll respond to the\n[ECHO](https://redis.io/commands/echo) command. You'll parse user input\naccording to the [the Redis protocol\nspecification](https://redis.io/topics/protocol).",
      "tester_source_code_url": "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_echo.go#L11"
    },
    {
      "slug": "la7",
      "name": "Implement the SET & GET commands",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for the [SET](https://redis.io/commands/set) &\n[GET](https://redis.io/commands/get) commands.\n\nThe `SET` command is used to set a key to a value. The `GET` command is used to retrieve the value of a key.\n\n```bash\n$ redis-cli SET foo bar\nOK\n$ redis-cli GET foo\nbar\n```\n\nThe `SET` command supports a number of extra options like `EX` (expiry time in seconds), `PX` (expiry time in milliseconds) and more. We\nwon't cover these extra options in this stage. We'll get to them in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a `SET` command to your server:\n\n```bash\n$ redis-cli SET foo bar\n```\n\nThe tester will expect to receive `+OK\\r\\n` as a response (that's the string `OK` encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#resp-simple-strings)).\n\nThis command will be followed by a `GET` command:\n\n```bash\n$ redis-cli GET foo\n```\n\nThe tester will expect to receive `$3\\r\\nbar\\r\\n` as a response (that's the string `bar` encoded as a [RESP bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings).\n\n### Notes\n\n- If you implemented a proper Redis protocol parser in the previous stage, you should be able to reuse it in this stage.\n- Just like the previous stage, the values used for keys and values will be random, so you won't be able to hardcode the response to pass this stage.\n- If a key doesn't exist, the `GET` command should return a \"null bulk string\" (`$-1\\r\\n`). We won't explicitly test this in this stage, but you'll need it for the next stage (expiry).",
      "marketing_md": "In this stage, you'll need to implement the\n[SET](https://redis.io/commands/set) &\n[GET](https://redis.io/commands/get) commands.",
      "tester_source_code_url": "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_get_set.go#L11"
    },
    {
      "slug": "yz1",
      "name": "Expiry",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for setting a key with an expiry.\n\nThe expiry for a key can be provided using the \"PX\" argument to the [SET](https://redis.io/commands/set) command. The expiry is provided in milliseconds.\n\n```bash\n$ redis-cli SET foo bar px 100 # Sets the key \"foo\" to \"bar\" with an expiry of 100 milliseconds\nOK\n```\n\nAfter the key has expired, a `GET` command for that key should return a \"null bulk string\" (`$-1\\r\\n`).\n\n{{#lang_is_haskell}}\nThe [time](https://hackage.haskell.org/package/time) package is available\nto use as a dependency.\n{{/lang_is_haskell}}\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send a `SET` command to your server to set a key with an expiry:\n\n```bash\n$ redis-cli SET foo bar px 100\n```\n\nIt'll then immediately send a `GET` command to retrieve the value:\n\n```bash\n$ redis-cli GET foo\n```\n\nIt'll expect the response to be `bar` (encoded as a RESP bulk string).\n\nIt'll then wait for the key to expire and send another `GET` command:\n\n```bash\n$ sleep 0.2 && redis-cli GET foo\n```\n\nIt'll expect the response to be `$-1\\r\\n` (a \"null bulk string\").\n\n### Notes\n\n- Just like command names, command arguments are also case-insensitive. So `PX`, `px` and `pX` are all valid.\n- The keys, values and expiry times used in the tests will be random, so you won't be able to hardcode a response to pass this stage.",
      "marketing_md": "In this stage, you'll add support for setting a key with an expiry. The\nexpiry is provided using the \"PX\" argument to the\n[SET](https://redis.io/commands/set) command.",
      "tester_source_code_url": "https://github.com/codecrafters-io/redis-tester/blob/master/internal/test_expiry.go"
    },
    {
      "slug": "zg5",
      "primary_extension_slug": "persistence-rdb",
      "name": "RDB file config",
      "difficulty": "easy",
      "description_md": "Welcome to the RDB Persistence Extension! In this extension, you'll add support for reading [RDB files](https://redis.io/docs/management/persistence/) (Redis Database files).\n\nIn this stage, you'll add support for two configuration parameters related to RDB persistence, as well as the [CONFIG GET](https://redis.io/docs/latest/commands/config-get/) command.\n\n### RDB files\n\nAn RDB file is a point-in-time snapshot of a Redis dataset. When RDB persistence is enabled, the Redis server syncs its in-memory state with an RDB file, by doing the following:\n\n1. On startup, the Redis server loads the data from the RDB file.\n2. While running, the Redis server periodically takes new snapshots of the dataset, in order to update the RDB file.\n\n### `dir` and `dbfilename`\n\nThe configuration parameters `dir` and `dbfilename` specify where an RDB file is stored:\n- `dir` - the path to the directory where the RDB file is stored (example: `/tmp/redis-data`)\n- `dbfilename` - the name of the RDB file (example: `rdbfile`)\n\n### The `CONFIG GET` command\n\nThe [`CONFIG GET`](https://redis.io/docs/latest/commands/config-get/) command returns the values of configuration parameters.\n\nIt takes in one or more configuration parameters and returns a [RESP array](https://redis.io/docs/latest/develop/reference/protocol-spec/#arrays) of key-value pairs:\n\n```bash\n$ redis-cli CONFIG GET dir\n1) \"dir\"\n2) \"/tmp/redis-data\"\n```\n\nAlthough `CONFIG GET` can fetch multiple parameters at a time, the tester will only send `CONFIG GET` commands with one parameter at a time.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh --dir /tmp/redis-files --dbfilename dump.rdb\n```\n\nIt'll then send the following commands:\n\n```bash\n$ redis-cli CONFIG GET dir\n$ redis-cli CONFIG GET dbfilename\n```\n\nYour server must respond to each `CONFIG GET` command with a RESP array containing two elements:\n\n1. The parameter **name**, encoded as a [RESP Bulk string](https://redis.io/docs/latest/develop/reference/protocol-spec/#bulk-strings)\n2. The parameter **value**, encoded as a RESP Bulk string\n\nFor example, if the value of `dir` is `/tmp/redis-files`, then the expected response to `CONFIG GET dir` is:\n\n```bash\n*2\\r\\n$3\\r\\ndir\\r\\n$16\\r\\n/tmp/redis-files\\r\\n\n```\n\n### Notes\n\n- You don't need to read the RDB file in this stage, you only need to store `dir` and `dbfilename`. Reading from the file will be covered in later stages.\n- If your repository was created before 5th Oct 2023, it's possible that your `./your_program.sh` script is not passing arguments to your program. To fix this, you'll need to edit `./your_program.sh`. Check the [update CLI args PR](https://github.com/codecrafters-io/build-your-own-redis/pull/89/files) for details on how to do this.\n",
      "marketing_md": "In this stage, you'll add support for reading the config values related to where RDB files are stored. You'll implement the `CONFIG GET` command.\n"
    },
    {
      "slug": "jz6",
      "primary_extension_slug": "persistence-rdb",
      "name": "Read a key",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for reading a single key from an RDB file.\n\n### RDB file format\n\n<details>\n  <summary>Click to expand/collapse</summary>\n#### RDB file format overview\n\nHere are the different sections of the RDB file, in order:\n\n1.  Header section\n2.  Metadata section\n3.  Database section\n4.  End of file section\n\nRDB files use special encodings to store different types of data. The ones relevant to this stage are \"size encoding\" and \"string encoding.\" These are explained near the end of this page.\n\nThe following breakdown of the RDB file format is based on [Redis RDB File Format](https://rdb.fnordig.de/file_format.html) by Jan-Erik Rediger. We’ve only included the parts that are relevant to this stage.\n\n#### Header section\n\nRDB files begin with a header section, which looks something like this:\n```\n52 45 44 49 53 30 30 31 31  // Magic string + version number (ASCII): \"REDIS0011\".\n```\n\nThe header contains the magic string `REDIS`, followed by a four-character RDB version number. In this challenge, the test RDB files all use version 11. So, the header is always `REDIS0011`.\n\n#### Metadata section\n\nNext is the metadata section. It contains zero or more \"metadata subsections,\" which each specify a single metadata attribute. Here's an example of a metadata subsection that specifies `redis-ver`:\n```\nFA                             // Indicates the start of a metadata subsection.\n09 72 65 64 69 73 2D 76 65 72  // The name of the metadata attribute (string encoded): \"redis-ver\".\n06 36 2E 30 2E 31 36           // The value of the metadata attribute (string encoded): \"6.0.16\".\n```\n\nThe metadata name and value are always string encoded.\n\n#### Database section\n\nNext is the database section. It contains zero or more \"database subsections,\" which each describe a single database. Here's an example of a database subsection:\n```\nFE                       // Indicates the start of a database subsection.\n00                       /* The index of the database (size encoded).\n                            Here, the index is 0. */\n\nFB                       // Indicates that hash table size information follows.\n03                       /* The size of the hash table that stores the keys and values (size encoded).\n                            Here, the total key-value hash table size is 3. */\n02                       /* The size of the hash table that stores the expires of the keys (size encoded).\n                            Here, the number of keys with an expiry is 2. */\n```\n\n```\n00                       /* The 1-byte flag that specifies the value’s type and encoding.\n                            Here, the flag is 0, which means \"string.\" */\n06 66 6F 6F 62 61 72     // The name of the key (string encoded). Here, it's \"foobar\".\n06 62 61 7A 71 75 78     // The value (string encoded). Here, it's \"bazqux\".\n```\n\n```\nFC                       /* Indicates that this key (\"foo\") has an expire,\n                            and that the expire timestamp is expressed in milliseconds. */\n15 72 E7 07 8F 01 00 00  /* The expire timestamp, expressed in Unix time,\n                            stored as an 8-byte unsigned long, in little-endian (read right-to-left).\n                            Here, the expire timestamp is 1713824559637. */\n00                       // Value type is string.\n03 66 6F 6F              // Key name is \"foo\".\n03 62 61 72              // Value is \"bar\".\n```\n\n```\nFD                       /* Indicates that this key (\"baz\") has an expire,\n                            and that the expire timestamp is expressed in seconds. */\n52 ED 2A 66              /* The expire timestamp, expressed in Unix time,\n                            stored as an 4-byte unsigned integer, in little-endian (read right-to-left).\n                            Here, the expire timestamp is 1714089298. */\n00                       // Value type is string.\n03 62 61 7A              // Key name is \"baz\".\n03 71 75 78              // Value is \"qux\".\n```\n\nHere's a more formal description of how each key-value pair is stored:\n\n1. Optional expire information (one of the following):\n    * Timestamp in seconds:\n          1.  `FD`\n          2.  Expire timestamp in seconds (4-byte unsigned integer)\n    * Timestamp in milliseconds:\n          1.  `FC`\n          2.  Expire timestamp in milliseconds (8-byte unsigned long)\n2. Value type (1-byte flag)\n3. Key (string encoded)\n4. Value (encoding depends on value type)\n\n#### End of file section\n\nThis section marks the end of the file. It looks something like this:\n```\nFF                       /* Indicates that the file is ending,\n                            and that the checksum follows. */\n89 3b b7 4e f8 0f 77 19  // An 8-byte CRC64 checksum of the entire file.\n```\n\n#### Size encoding\n\nSize-encoded values specify the size of something. Here are some examples:\n- The database indexes and hash table sizes are size encoded.\n- String encoding begins with a size-encoded value that specifies the number of characters in the string.\n- List encoding begins with a size-encoded value that specifies the number of elements in the list.\n\nThe first two bits of a size-encoded value indicate how the value should be parsed. Here's a guide (bits are shown in both hexadecimal and binary):\n```\n/* If the first two bits are 0b00:\n   The size is the remaining 6 bits of the byte.\n   In this example, the size is 10: */\n0A\n00001010\n\n/* If the first two bits are 0b01:\n   The size is the next 14 bits\n   (remaining 6 bits in the first byte, combined with the next byte),\n   in big-endian (read left-to-right).\n   In this example, the size is 700: */\n42 BC\n01000010 10111100\n\n/* If the first two bits are 0b10:\n   Ignore the remaining 6 bits of the first byte.\n   The size is the next 4 bytes, in big-endian (read left-to-right).\n   In this example, the size is 17000: */\n80 00 00 42 68\n10000000 00000000 00000000 01000010 01101000\n\n/* If the first two bits are 0b11:\n   The remaining 6 bits specify a type of string encoding.\n   See string encoding section. */\n```\n\n#### String encoding\n\nA string-encoded value consists of two parts:\n1.  The size of the string (size encoded).\n2.  The string.\n\nHere's an example:\n```\n/* The 0x0D size specifies that the string is 13 characters long.\n   The remaining characters spell out \"Hello, World!\". */\n0D 48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21\n```\n\nFor sizes that begin with `0b11`, the remaining 6 bits indicate a type of string format:\n```\n/* The 0xC0 size indicates the string is an 8-bit integer.\n   In this example, the string is \"123\". */\nC0 7B\n\n/* The 0xC1 size indicates the string is a 16-bit integer.\n   The remaining bytes are in little-endian (read right-to-left).\n   In this example, the string is \"12345\". */\nC1 39 30\n\n/* The 0xC2 size indicates the string is a 32-bit integer.\n   The remaining bytes are in little-endian (read right-to-left),\n   In this example, the string is \"1234567\". */\nC2 87 D6 12 00\n\n/* The 0xC3 size indicates that the string is compressed with the LZF algorithm.\n   You will not encounter LZF-compressed strings in this challenge. */\nC3 ...\n```\n</details>\n\n\n### The `KEYS` command\n<details>\n  <summary>Click to expand/collapse</summary>\n\nThe [`KEYS command`](https://redis.io/docs/latest/commands/keys/) returns all the keys that match a given pattern, as a RESP array:\n```\n$ redis-cli SET foo bar\nOK\n$ redis-cli SET baz qux\nOK\n$ redis-cli KEYS \"f*\"\n1) \"foo\"\n```\n\nWhen the pattern is `*`, the command returns all the keys in the database:\n```\n$ redis-cli KEYS \"*\"\n1) \"baz\"\n2) \"foo\"\n```\n\nIn this stage, you must add support for the `KEYS` command. However, you only need to support the `*` pattern.\n</details>\n\n### Tests\n\nThe tester will create an RDB file with a single key and execute your program like this:\n```\n$ ./your_program.sh --dir <dir> --dbfilename <filename>\n```\n\nIt'll then send a `KEYS \"*\"` command to your server.\n```\n$ redis-cli KEYS \"*\"\n```\n\nYour server must respond with a RESP array that contains the key from the RDB file:\n```\n*1\\r\\n$3\\r\\nfoo\\r\\n\n```\n\n### Notes\n\n- The RDB file provided by `--dir` and `--dbfilename` might not exist. If the file doesn't exist, your program must treat the database as empty.\n- RDB files use both little-endian and big-endian to store numbers. See the [MDN article on endianness](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) to learn more.\n- To generate an RDB file, use the [`SAVE` command](https://redis.io/docs/latest/commands/save/).\n",
      "marketing_md": "In this stage, you'll add support for reading a key from an RDB file that contains a single key-value pair. You'll do this by implementing the `KEYS *` command.\n"
    },
    {
      "slug": "gc6",
      "primary_extension_slug": "persistence-rdb",
      "name": "Read a string value",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for reading the value corresponding to a key from an RDB file.\n\nJust like with the previous stage, we'll stick to supporting RDB files that contain a single key for now.\n\nThe tester will create an RDB file with a single key and execute your program like this:\n\n```\n./your_program.sh --dir <dir> --dbfilename <filename>\n```\n\nIt'll then send a `GET <key>` command to your server.\n\n```bash\n$ redis-cli GET \"foo\"\n```\n\nThe response to `GET <key>` should be a RESP bulk string with the value of the key.\n\nFor example, let's say the RDB file contains a key called `foo` with the value `bar`. The expected response will be `$3\\r\\nbar\\r\\n`.\n\nStrings can be encoded in three different ways in the RDB file format:\n\n- Length-prefixed strings\n- Integers as strings\n- Compressed strings\n\nIn this stage, you only need to support length-prefixed strings. We won't cover the other two types in this challenge.\n\nWe recommend using [this blog post](https://rdb.fnordig.de/file_format.html) as a reference when working on this stage.\n",
      "marketing_md": "In this stage, you'll add support for reading the value of a key from an RDB file that contains a single key-value pair.\n"
    },
    {
      "slug": "jw4",
      "primary_extension_slug": "persistence-rdb",
      "name": "Read multiple keys",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for reading multiple keys from an RDB file.\n\nThe tester will create an RDB file with multiple keys and execute your program like this:\n\n```bash\n$ ./your_program.sh --dir <dir> --dbfilename <filename>\n```\n\nIt'll then send a `KEYS *` command to your server.\n\n```bash\n$ redis-cli KEYS \"*\"\n```\n\nThe response to `KEYS *` should be a RESP array with the keys as elements.\n\nFor example, let's say the RDB file contains two keys: `foo` and `bar`. The expected response will be:\n\n```\n*2\\r\\n$3\\r\\nfoo\\r\\n$3\\r\\nbar\\r\\n\n```\n\n- `*2\\r\\n` indicates that the array has two elements\n- `$3\\r\\nfoo\\r\\n` indicates that the first element is a bulk string with the value `foo`\n- `$3\\r\\nbar\\r\\n` indicates that the second element is a bulk string with the value `bar`\n",
      "marketing_md": "In this stage, you'll add support for reading multiple keys from an RDB file. You'll do this by extending the `KEYS *` command to support multiple keys.\n"
    },
    {
      "slug": "dq3",
      "primary_extension_slug": "persistence-rdb",
      "name": "Read multiple string values",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for reading multiple string values from an RDB file.\n\nThe tester will create an RDB file with multiple keys and execute your program like this:\n\n```bash\n$ ./your_program.sh --dir <dir> --dbfilename <filename>\n```\n\nIt'll then send multiple `GET <key>` commands to your server.\n\n```bash\n$ redis-cli GET \"foo\"\n$ redis-cli GET \"bar\"\n```\n\nThe response to each `GET <key>` command should be a RESP bulk string with the value corresponding to the key.\n",
      "marketing_md": "In this stage, you'll add support for reading multiple string values from an RDB file.\n"
    },
    {
      "slug": "sm4",
      "primary_extension_slug": "persistence-rdb",
      "name": "Read value with expiry",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for reading values that have an expiry set.\n\nThe tester will create an RDB file with multiple keys. Some of these keys will have an expiry set, and some won't. The expiry timestamps\nwill also be random, some will be in the past and some will be in the future.\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh --dir <dir> --dbfilename <filename>\n```\n\nIt'll then send multiple `GET <key>` commands to your server.\n\n```bash\n$ redis-cli GET \"foo\"\n$ redis-cli GET \"bar\"\n```\n\nWhen a key has expired, the expected response is `$-1\\r\\n` (a \"null bulk string\").\n\nWhen a key hasn't expired, the expected response is a RESP bulk string with the value corresponding to the key.\n",
      "marketing_md": "In this stage, you'll add support for reading values that have an expiry set.\n"
    },
    {
      "slug": "bw1",
      "primary_extension_slug": "replication",
      "name": "Configure listening port",
      "difficulty": "easy",
      "description_md": "Welcome to the Replication extension!\n\nIn this extension, you'll extend your Redis server to support [leader-follower replication](https://redis.io/docs/management/replication/). You'll be able to run\nmultiple Redis servers with one acting as the \"master\" and the others as \"replicas\". Changes made to the master will be automatically replicated to replicas.\n\nSince we'll need to run multiple instances of your Redis server at once, we can't run all of them on port 6379.\n\nIn this stage, you'll add support for starting the Redis server on a custom port. The port number will be passed to your program via the `--port` flag.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port 6380\n```\n\nIt'll then try to connect to your TCP server on the specified port number (`6380` in the example above). If the connection succeeds, you'll pass this stage.\n\n### Notes\n\n- Your program still needs to pass the previous stages, so if `--port` isn't specified, you should default to port 6379.\n- The tester will pass a random port number to your program, so you can't hardcode the port number from the example above.\n- If your repository was created before 5th Oct 2023, it's possible that your `./your_program.sh` script\nmight not be passing arguments on to your program. You'll need to edit `./your_program.sh` to fix this, check\n[this PR](https://github.com/codecrafters-io/build-your-own-redis/pull/89/files) for details.\n",
      "marketing_md": "In this stage, you'll add support for parsing the `--port` flag and starting Redis on a custom port.\n"
    },
    {
      "slug": "ye5",
      "primary_extension_slug": "replication",
      "name": "The INFO command",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for responding to the [INFO](https://redis.io/commands/info/) command as a master.\n\nThe `INFO` command returns information and statistics about a Redis server. In this stage, we'll add support for the `replication` section of the `INFO` command.\n\n### The replication section\n\nWhen you run the `INFO` command against a Redis server, you'll see something like this:\n\n```\n$ redis-cli INFO replication\n# Replication\nrole:master\nconnected_slaves:0\nmaster_replid:8371b4fb1155b71f4a04d3e1bc3e18c4a990aeeb\nmaster_repl_offset:0\nsecond_repl_offset:-1\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:\n```\n\nThe reply to this command is a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings) where each line is a key value pair, separated by \":\".\n\nHere are what some of the important fields mean:\n\n- `role`: The role of the server (`master` or `slave`)\n- `connected_slaves`: The number of connected replicas\n- `master_replid`: The replication ID of the master (we'll get to this in later stages)\n- `master_repl_offset`: The replication offset of the master (we'll get to this in later stages)\n\nIn this stage, you'll only need to support the `role` key. We'll add support for other keys in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT>\n```\n\nIt'll then send the `INFO` command with `replication` as an argument.\n\n```bash\n$ redis-cli -p <PORT> info replication\n```\n\nYour program should respond with a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings) where each line\nis a key value pair separated by `:`. The tester will only look for the `role` key, and assert that the value is `master`.\n\n### Notes\n\n- In the response for the `INFO` command, you only need to support the `role` key for this stage. We'll add support for the other keys in later stages.\n- The `# Replication` heading in the response is optional, you can ignore it.\n- The response to `INFO` needs to be encoded as a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings).\n  - An example valid response would be `$11\\r\\nrole:master\\r\\n` (the string `role:master` encoded as a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings))\n- The `INFO` command can be used without any arguments, in which case it returns all sections available. In this stage, we'll\n  always send `replication` as an argument to the `INFO` command, so you only need to support the `replication` section.\n",
      "marketing_md": "In this stage, you'll add support for the INFO command on the master.\n"
    },
    {
      "slug": "hc6",
      "primary_extension_slug": "replication",
      "name": "The INFO command on a replica",
      "difficulty": "medium",
      "description_md": "In this stage, you'll extend your [INFO](https://redis.io/commands/info/) command to run on a replica.\n\n### The `--replicaof` flag\n\nBy default, a Redis server assumes the \"master\" role. When the `--replicaof` flag is passed, the server assumes the \"slave\" role instead.\n\nHere's an example usage of the `--replicaof` flag:\n\n```\n./your_program.sh --port 6380 --replicaof \"localhost 6379\"\n```\n\nIn this example, we're starting a Redis server in replica mode. The server itself will listen for connections on port 6380, but it'll\nalso connect to a master (another Redis server) running on localhost port 6379 and replicate all changes from the master.\n\nWe'll learn more about how this replication works in later stages. For now, we'll focus on adding support for the `--replicaof` flag, and\nextending the `INFO` command to support returning `role: slave` when the server is a replica.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT> --replicaof \"<MASTER_HOST> <MASTER_PORT>\"\n```\n\nIt'll then send the `INFO` command with `replication` as an argument to your server.\n\n```bash\n$ redis-cli -p <PORT> info replication\n```\n\nYour program should respond with a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings) where each line\nis a key value pair separated by `:`. The tester will only look for the `role` key, and assert that the value is `slave`.\n\n### Notes\n\n- Your program still needs to pass the previous stage tests, so if `--replicaof` isn't specified, you should default to the `master` role.\n- Just like the last stage, you only need to support the `role` key in the response for this stage. We'll add support for the other keys in later stages.\n- You don't need to actually connect to the master server specified via `--replicaof` in this stage. We'll get to that in later stages.\n",
      "marketing_md": "In this stage, you'll add support for the --replicaof arg and INFO command on the replica.\n"
    },
    {
      "slug": "xc1",
      "primary_extension_slug": "replication",
      "name": "Initial Replication ID and Offset",
      "difficulty": "easy",
      "description_md": "In this stage, you'll extend your `INFO` command to return two additional values: `master_replid` and `master_repl_offset`.\n\n### The replication ID and offset\n\nEvery Redis master has a replication ID: it is a large pseudo random string. This is set when the master is booted. Every time\na master instance restarts from scratch, its replication ID is reset.\n\nEach master also maintains a \"replication offset\" corresponding to how many bytes of commands have been added to the replication\nstream. We'll learn more about this offset in later stages. For now, just know that the value starts from `0` when a master is\nbooted and no replicas have connected yet.\n\nIn this stage, you'll initialize a replication ID and offset for your master:\n\n- The ID can be any pseudo random alphanumeric string of 40 characters.\n  - For the purposes of this challenge, you don't need to actually generate a random string, you can hardcode it instead.\n  - As an example, you can hardcode `8371b4fb1155b71f4a04d3e1bc3e18c4a990aeeb` as the replication ID.\n- The offset is to be 0.\n\nThese two values should be returned as part of the INFO command output, under the `master_replid` and `master_repl_offset` keys respectively.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh\n```\n\nIt'll then send the `INFO` command with `replication` as an argument to your server.\n\n```bash\n$ redis-cli INFO replication\n```\n\nYour program should respond with a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings) where each line\nis a key value pair separated by `:`. The tester will look for the following keys:\n\n- `master_replid`, which should be a 40 character alphanumeric string\n- `master_repl_offset`, which should be `0`\n\n### Notes\n\n- Your code should still pass the previous stage tests, so the `role` key still needs to be returned\n",
      "marketing_md": "In this stage, you'll add support for reading a key from an RDB file that contains a single key-value pair. You'll do this by implementing the `KEYS *` command.\n"
    },
    {
      "slug": "gl7",
      "primary_extension_slug": "replication",
      "name": "Send handshake (1/3)",
      "difficulty": "easy",
      "description_md": "In this stage, you'll implement part 1 of the handshake that happens when a replica connects to master.\n\n### Handshake\n\nWhen a replica connects to a master, it needs to go through a handshake process before receiving updates from the master.\n\nThere are three parts to this handshake:\n\n- The replica sends a `PING` to the master (**This stage**)\n- The replica sends `REPLCONF` twice to the master (Next stages)\n- The replica sends `PSYNC` to the master (Next stages)\n\nWe'll learn more about `REPLCONF` and `PSYNC` in later stages. For now, we'll focus on the first part of the handshake: sending `PING` to the master.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT> --replicaof \"<MASTER_HOST> <MASTER_PORT>\"\n```\n\nIt'll then assert that the replica connects to the master and sends the `PING` command.\n\n### Notes\n\n- The `PING` command should be sent as a RESP Array, like this : `*1\\r\\n$4\\r\\nPING\\r\\n`\n",
      "marketing_md": "In this stage, you'll add support for starting the handshake from the Replica side.\n"
    },
    {
      "slug": "eh4",
      "primary_extension_slug": "replication",
      "name": "Send handshake (2/3)",
      "difficulty": "easy",
      "description_md": "In this stage, you'll implement part 2 of the handshake that happens when a replica connects to master.\n\n### Handshake (continued from previous stage)\n\nAs a recap, there are three parts to the handshake:\n\n- The replica sends a `PING` to the master (Previous stage)\n- The replica sends `REPLCONF` twice to the master (**This stage**)\n- The replica sends `PSYNC` to the master (Next stage)\n\nAfter receiving a response to `PING`, the replica then sends 2 [REPLCONF](https://redis.io/commands/replconf/) commands to the master.\n\nThe `REPLCONF` command is used to configure replication. Replicas will send this command to the master twice:\n\n- The first time, it'll be sent like this: `REPLCONF listening-port <PORT>`\n  - This is the replica notifying the master of the port it's listening on\n- The second time, it'll be sent like this: `REPLCONF capa psync2`\n  - This is the replica notifying the master of its capabilities (\"capa\" is short for \"capabilities\")\n  - You can safely hardcode these capabilities for now, we won't need to use them in this challenge.\n\nThese commands should be sent as RESP Arrays, so the exact bytes will look something like this:\n\n```\n# REPLCONF listening-port <PORT>\n*3\\r\\n$8\\r\\nREPLCONF\\r\\n$14\\r\\nlistening-port\\r\\n$4\\r\\n6380\\r\\n\n\n# REPLCONF capa psync2\n*3\\r\\n$8\\r\\nREPLCONF\\r\\n$4\\r\\ncapa\\r\\n$6\\r\\npsync2\\r\\n\n```\n\nFor both commands, the master will respond with `+OK\\r\\n` (\"OK\" encoded as a RESP Simple String).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT> --replicaof \"<MASTER_HOST> <MASTER_PORT>\"\n```\n\nIt'll then assert that the replica connects to the master and:\n\n- **(a)** sends the `PING` command\n- **(b)** sends the `REPLCONF` command with `listening-port` and `<PORT>` as arguments\n- **(c)** sends the `REPLCONF` command with `capa psync2` as arguments\n\n**Notes**\n\n- The response to `REPLCONF` will always be `+OK\\r\\n` (\"OK\" encoded as a RESP Simple String)\n",
      "marketing_md": "In this stage, you'll add support for continuing the handshake from the Replica side, by sending REPLCONF.\n"
    },
    {
      "slug": "ju6",
      "primary_extension_slug": "replication",
      "name": "Send handshake (3/3)",
      "difficulty": "medium",
      "description_md": "In this stage, you'll implement part 3 of the handshake that happens when a replica connects to master.\n\n### Handshake (continued from previous stage)\n\nAs a recap, there are three parts to the handshake:\n\n- The replica sends a `PING` to the master (Previous stages)\n- The replica sends `REPLCONF` twice to the master (Previous stages)\n- The replica sends `PSYNC` to the master (**This stage**)\n\nAfter receiving a response to the second `REPLCONF`, the replica then sends a [PSYNC](https://redis.io/commands/psync/) command to the master.\n\nThe `PSYNC` command is used to synchronize the state of the replica with the master. The replica will send this command to the master with two arguments:\n\n- The first argument is the replication ID of the master\n  - Since this is the first time the replica is connecting to the master, the replication ID will be `?` (a question mark)\n- The second argument is the offset of the master\n  - Since this is the first time the replica is connecting to the master, the offset will be `-1`\n\nSo the final command sent will be `PSYNC ? -1`.\n\nThis should be sent as a RESP Array, so the exact bytes will look something like this:\n\n```\n*3\\r\\n$5\\r\\nPSYNC\\r\\n$1\\r\\n?\\r\\n$2\\r\\n-1\\r\\n\n```\n\nThe master will respond with a [Simple string](https://redis.io/docs/reference/protocol-spec/#simple-strings) that looks like this:\n\n```\n+FULLRESYNC <REPL_ID> 0\\r\\n\n```\n\nYou can ignore the response for now, we'll get to handling it in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT> --replicaof \"<MASTER_HOST> <MASTER_PORT>\"\n```\n\nIt'll then assert that the replica connects to the master and:\n\n- **(a)** sends `PING` command\n- **(b)** sends `REPLCONF listening-port <PORT>`\n- **(c)** sends `REPLCONF capa eof capa psync2`\n- **(d)** sends `PSYNC ? -1`\n",
      "marketing_md": "In this stage, you'll add support for finishing the handshake from the Replica side, by sending PSYNC.\n"
    },
    {
      "slug": "fj0",
      "primary_extension_slug": "replication",
      "name": "Receive handshake (1/2)",
      "difficulty": "easy",
      "description_md": "In this stage, we'll start implementing support for receiving a replication handshake as a master.\n\n### Handshake (continued from previous stage)\n\nWe'll now implement the same handshake we did in the previous stages, but on the master instead of the replica.\n\nAs a recap, there are three parts to the handshake:\n\n- The master receives a `PING` from the replica\n  - Your Redis server already supports the `PING` command, so there's no additional work to do here\n- The master receives `REPLCONF` twice from the replica (**This stage**)\n- The master receives `PSYNC` from the replica (Next stage)\n\nIn this stage, you'll add support for receiving the `REPLCONF` command from the replica.\n\nYou'll receive `REPLCONF` twice from the replica. For the purposes of this challenge, you can safely ignore the arguments for both commands and just\nrespond with `+OK\\r\\n` (\"OK\" encoded as a RESP Simple String).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT>\n```\n\nIt'll then send the following commands:\n\n1. `PING` (expecting `+PONG\\r\\n` back)\n2. `REPLCONF listening-port <PORT>` (expecting `+OK\\r\\n` back)\n3. `REPLCONF capa psync2` (expecting `+OK\\r\\n` back)\n",
      "marketing_md": "In this stage, you'll add support for starting the handshake from the master side, by accepting REPLCONF.\n"
    },
    {
      "slug": "vm3",
      "primary_extension_slug": "replication",
      "name": "Receive handshake (2/2)",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for receiving the [`PSYNC`](https://redis.io/commands/psync/) command from the replica.\n\n### Handshake (continued from previous stage)\n\nAs a recap, there are three parts to the handshake:\n\n- The master receives a `PING` from the replica (You've already implemented this)\n- The master receives `REPLCONF` twice from the replica (You've already implemented this)\n- The master receives `PSYNC` from the replica (**This stage**)\n\nAfter the replica sends `REPLCONF` twice, it'll send a `PSYNC ? -1` command to the master.\n\n- The first argument is `?`\n  - This is the replication ID of the master, it is `?` because this is the first time the replica is connecting to the master.\n- The second argument is `-1`\n  - This is the replication offset, it is `-1` because this is the first time the replica is connecting to the master.\n\nThe final command you receive will look something like this:\n\n```\n*3\\r\\n$5\\r\\nPSYNC\\r\\n$1\\r\\n?\\r\\n$2\\r\\n-1\\r\\n\n```\n\n(That's `[\"PSYNC\", \"?\", \"-1\"]` encoded as a RESP Array)\n\nThe master needs to respond with `+FULLRESYNC <REPL_ID> 0\\r\\n` (\"FULLRESYNC <REPL_ID> 0\" encoded as a RESP Simple String). Here's what\nthe response means:\n\n- `FULLRESYNC` means that the master cannot perform incremental replication with the replica, and will thus start a \"full\" resynchronization.\n- `<REPL_ID>` is the replication ID of the master. You've already set this in the \"Replication ID & Offset\" stage.\n  - As an example, you can hardcode `8371b4fb1155b71f4a04d3e1bc3e18c4a990aeeb` as the replication ID.\n- `0` is the replication offset of the master. You've already set this in the \"Replication ID & Offset\" stage.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT>\n```\n\nIt'll then connect to your TCP server as a replica and execute the following commands:\n\n1. `PING` (expecting `+PONG\\r\\n` back)\n2. `REPLCONF listening-port <PORT>` (expecting `+OK\\r\\n` back)\n3. `REPLCONF capa eof capa psync2` (expecting `+OK\\r\\n` back)\n4. `PSYNC ? -1` (expecting `+FULLRESYNC <REPL_ID> 0\\r\\n` back)\n\n**Notes**:\n\n- In the response, `<REPL_ID>` needs to be replaced with the replication ID of the master which you've initialized in previous stages.\n",
      "marketing_md": "In this stage, you'll add support for accepting PSYNC, and starting a FULLRESYNC.\n"
    },
    {
      "slug": "cf8",
      "primary_extension_slug": "replication",
      "name": "Empty RDB Transfer",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for sending an empty RDB file as a master. This is part of the \"full resynchronization\" process.\n\n### Full resynchronization\n\nWhen a replica connects to a master for the first time, it sends a `PSYNC ? -1` command. This is the replica's way of\ntelling the master that it doesn't have any data yet, and needs to be fully resynchronized.\n\nThe master acknowledges this by sending a `FULLRESYNC` response to the replica.\n\nAfter sending the `FULLRESYNC` response, the master will then send a RDB file of its current state to the replica. The replica is expected to load the file into memory, replacing its current state.\n\nFor the purposes of this challenge, you don't have to actually construct an RDB file. We'll assume that the master's database is always empty,\nand just hardcode an empty RDB file to send to the replica.\n\nYou can find the hex representation of an empty RDB file [here](https://github.com/codecrafters-io/redis-tester/blob/main/internal/assets/empty_rdb_hex.md).\n\nThe tester will accept any valid RDB file that is empty, you don't need to send the exact file above.\n\nThe file is sent using the following format:\n\n```\n$<length_of_file>\\r\\n<binary_contents_of_file>\n```\n\n(This is similar to how [Bulk Strings](https://redis.io/topics/protocol#resp-bulk-strings) are encoded, but without the trailing `\\r\\n`)\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT>\n```\n\nIt'll then connect to your TCP server as a replica and execute the following commands:\n\n1. `PING` (expecting `+PONG\\r\\n` back)\n2. `REPLCONF listening-port <PORT>` (expecting `+OK\\r\\n` back)\n3. `REPLCONF capa eof capa psync2` (expecting `+OK\\r\\n` back)\n4. `PSYNC ? -1` (expecting `+FULLRESYNC <REPL_ID> 0\\r\\n` back)\n\nAfter receiving a response to the last command, the tester will expect to receive an empty RDB file from your server.\n\n### Notes\n\n- The [RDB file link](https://github.com/codecrafters-io/redis-tester/blob/main/internal/assets/empty_rdb_hex.md) contains hex & base64 representations\n  of the file. You need to decode these into binary contents before sending it to the replica.\n- The RDB file should be sent like this: `$<length>\\r\\n<contents>`\n  - `<length>` is the length of the file in bytes\n  - `<contents>` is the binary contents of the file\n  - Note that this is NOT a RESP bulk string, it doesn't contain a `\\r\\n` at the end\n- If you want to learn more about the RDB file format, read [this blog post](https://rdb.fnordig.de/file_format.html). This challenge\n  has a separate extension dedicated to reading RDB files.\n",
      "marketing_md": "In this stage, you'll add support for sending an empty RDB file to the replica. This is part of the \"full resynchronization\" process.\n"
    },
    {
      "slug": "zn8",
      "primary_extension_slug": "replication",
      "name": "Single-replica propagation",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for propagating write commands to a single replica as a master.\n\n### Command propagation\n\nAfter the replication handshake is complete and the master has sent the RDB file to the replica, the\nmaster starts propagating commands to the replica.\n\nWhen a master receives a \"write\" command from a client, it propagates the command to the replica. The\nreplica processes the command and updates its state. More on how this propagation works in the\n\"Replication connection\" section below.\n\nCommands like `PING`, `ECHO` etc. are not considered \"write\" commands, so they aren't propagated. Commands like\n`SET`, `DEL` etc. are considered \"write\" commands, so they are propagated.\n\n### Replication connection\n\nCommand propagation happens over the replication connection. This is the same connection that was used for the handshake.\n\nPropagated commands are sent as RESP arrays. For example, if the master receives `SET foo bar` as a command from a client,\nit'll send `*3\\r\\n$3\\r\\nSET\\r\\n$3\\r\\nfoo\\r\\n$3\\r\\nbar\\r\\n` to all connected replicas over their respective replication connections.\n\nReplicas process commands received over the replication connection just like they would process commands received from a client,\nbut with one difference: Replicas don't send responses back to the master. They just process the command silently and update their\nstate.\n\nSimilarly, the master doesn't wait for a response from the replica when propagating commands. It just keeps sending commands as they\ncome in.\n\nThere is one exception to this \"no response\" rule, the `REPLCONF GETACK` command. We'll learn about this in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT>\n```\n\nIt'll then connect to your TCP server as a replica and execute the following commands:\n\n1. `PING` (expecting `+PONG\\r\\n` back)\n2. `REPLCONF listening-port <PORT>` (expecting `+OK\\r\\n` back)\n3. `REPLCONF capa eof capa psync2` (expecting `+OK\\r\\n` back)\n4. `PSYNC ? -1` (expecting `+FULLRESYNC <REPL_ID> 0\\r\\n` back)\n\nThe tester will then wait for your server to send an RDB file.\n\nOnce the RDB file is received, the tester will send series of write commands to your program (as a separate Redis client, not the replica).\n\n```bash\n$ redis-cli SET foo 1\n$ redis-cli SET bar 2\n$ redis-cli SET baz 3\n```\n\nIt'll then assert that these commands were propagated to the replica, in order. The tester will\nexpect to receive these commands (encoded as RESP arrays) on the replication connection (the one used for the handshake).\n\n### Notes\n\n- A true implementation would buffer the commands so that they can be sent to the replica after it loads the RDB file. For the\n  purposes of this challenge, you can assume that the replica is ready to receive commands immediately after receiving the RDB file.\n",
      "marketing_md": "In this stage, you'll add support for finishing the sync handshake from the master side, by sending a RDB file.\n"
    },
    {
      "slug": "hd5",
      "primary_extension_slug": "replication",
      "name": "Multi Replica Command Propagation",
      "difficulty": "hard",
      "description_md": "In this stage, you'll extend your implementation of the master to support propagating commands to multiple replicas.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT>\n```\n\nIt'll then start **multiple** replicas that connect to your server and execute the following commands:\n\n1. `PING` (expecting `+PONG\\r\\n` back)\n2. `REPLCONF listening-port <PORT>` (expecting `+OK\\r\\n` back)\n3. `REPLCONF capa psync2` (expecting `+OK\\r\\n` back)\n4. `PSYNC ? -1` (expecting `+FULLRESYNC <REPL_ID> 0\\r\\n` back)\n\nEach replica will expect to receive an RDB file from the master after the handshake is complete.\n\nIt'll then send `SET` commands to the master from a client (a separate Redis client, not the replicas).\n\n```bash\n$ redis-cli SET foo 1\n$ redis-cli SET bar 2\n$ redis-cli SET baz 3\n```\n\nIt'll then assert that each replica received those commands, in order.\n",
      "marketing_md": "In this stage, you'll complete your implementation of Redis replication.\n"
    },
    {
      "slug": "yg4",
      "primary_extension_slug": "replication",
      "name": "Command Processing",
      "difficulty": "hard",
      "description_md": "In this stage you'll implement the processing of propagated commands as a replica.\n\n### Command processing\n\nAfter the replica receives a command from the master, it processes it and apply it to its own state. This\nwill work exactly like a regular command sent by a client, except that the replica doesn't send a response\nback to the master.\n\nFor example, if the command `SET foo 1` is propagated to the replica by a master, the replica must update\nits database to set the value of `foo` to `1`. Unlike commands from a regular client though, it must not reply with `+OK\\r\\n`.\n\n### Tests\n\nThe tester will spawn a Redis master, and it'll then execute your program as a replica like this:\n\n```\n./your_program.sh --port <PORT> --replicaof \"<MASTER_HOST> <MASTER_PORT>\"\n```\n\nJust like in the previous stages, your replica should complete the handshake with the master and receive an empty RDB file.\n\nOnce the RDB file is received, the master will propagate a series of write commands to your program.\n\n```bash\nSET foo 1 # propagated from master to replica\nSET bar 2 # propagated from master to replica\nSET baz 3 # propagated from master to replica\n```\n\nThe tester will then issue `GET` commands to your program to check if the commands were processed correctly.\n\n```bash\n$ redis-cli GET foo # expecting `1` back\n$ redis-cli GET bar # expecting `2` back\n# ... and so on\n```\n\n### Notes\n\n- The propagated commands are sent as RESP arrays. So the command `SET foo 1` will be sent as `*3\\r\\n$3\\r\\nSET\\r\\n$3\\r\\nfoo\\r\\n$1\\r\\n1\\r\\n`.\n- It is **not** guaranteed that propagated commands will be sent one at a time. One \"TCP segment\" might contain bytes for multiple commands.\n",
      "marketing_md": "In this stage, you'll add support for processing commands received by the replica from the master.\n"
    },
    {
      "slug": "xv6",
      "primary_extension_slug": "replication",
      "name": "ACKs with no commands",
      "difficulty": "easy",
      "description_md": "In this stage you'll implement support for responding to the `REPLCONF GETACK` command as a replica.\n\n### ACKs\n\n<details>\n  <summary>Click to expand/collapse</summary>\n\n  Unlike regular commands, when a master forwards commands to a replica via the replication connection, the replica doesn't\n  respond to each command. It just silently processes the commands and updates its state.\n\n  Since the master doesn't receive a response for each command, it needs another way to keep track of whether a replica is \"in sync\".\n  That's what ACKs are for.\n\n  ACK is short for \"acknowledgement\". Redis masters periodically ask replicas to send ACKs.\n\n  Each ACK contains an \"offset\", which is the number of bytes of commands processed by the replica.\n\n  We'll learn about how this offset is calculated and used in later stages. In this stage, we'll focus on implementing the\n  mechanism through which a master asks for an ACK from a replica: the `REPLCONF GETACK` command.\n</details>\n\n### The `REPLCONF GETACK` command\n\n<details>\n  <summary>Click to expand/collapse</summary>\n\n  When a master requires an ACK from a replica, it sends a `REPLCONF GETACK *` command to the replica. This is sent over\n  the replication connection (i.e. the connection that remains after the replication handshake is complete).\n\n  When the replica receives this command, it responds with a `REPLCONF ACK <offset>` response. The offset is the\n  number of bytes of commands processed by the replica. It starts at 0 and is incremented for every command processed by the replica.\n\n  In this stage, you'll implement support for receiving the `REPLCONF GETACK *` command and responding with `REPLCONF ACK 0`.\n\n  You can hardcode the offset to 0 for now. We'll implement proper offset tracking in the next stage.\n\n  The exact command received by the replica will look something like this: `*3\\r\\n$8\\r\\nreplconf\\r\\n$6\\r\\ngetack\\r\\n$1\\r\\n*\\r\\n` (that's\n  `[\"replconf\", \"getack\", \"*\"]` encoded as a [RESP Array](https://redis.io/docs/reference/protocol-spec/#arrays)).\n</details>\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT> --replicaof \"<HOST> <PORT>\"\n```\n\nJust like in the previous stages, your replica should complete the handshake with the master and receive an empty RDB file.\n\nThe master will then send `REPLCONF GETACK *` to your replica. It'll expect to receive `REPLCONF ACK 0` as a reply.\n\n### Notes\n\n- The response should be encoded as a [RESP Array](https://redis.io/docs/reference/protocol-spec/#arrays), like\n  this: `*3\\r\\n$8\\r\\nREPLCONF\\r\\n$3\\r\\nACK\\r\\n$1\\r\\n0\\r\\n`.\n- We'll implement proper offset tracking in the next stage, for now you can hardcode the offset to 0.\n- After the master-replica handshake is complete, a replica should **only** send responses to `REPLCONF GETACK` commands. All\n  other propagated commands (like `PING`, `SET` etc.) should be read and processed, but a response should not be sent back to the master.\n",
      "marketing_md": "In this stage, you'll add support for returning an ACK back to master as a response to GETACK.\n"
    },
    {
      "slug": "yd3",
      "primary_extension_slug": "replication",
      "name": "ACKs with commands",
      "difficulty": "medium",
      "description_md": "In this stage, you'll extend your `REPLCONF GETACK` implementation to respond with the number of bytes of commands processed by the replica.\n\n### Offset tracking\n\n<details>\n  <summary>Click to expand/collapse</summary>\n  As we saw in previous stages, when a replica receives a command from the master, it processes it and updates its state. In addition to processing\n  commands, the replica also keeps a running count of the number of bytes of commands it has processed.\n\n  This count is called the \"offset\". When a master sends a `REPLCONF GETACK` command to a replica, the replica is expected to respond with\n  `REPLCONF ACK <offset>`. The returned `<offset>` should only include the number of bytes of commands processed **before** receiving the `REPLCONF GETACK` command.\n\n  As an example:\n\n  - Let's say a replica connects to a master and completes the handshake.\n  - The master then sends a `REPLCONF GETACK *` command.\n      - The replica should respond with `REPLCONF ACK 0`.\n      - The returned offset is 0 since no commands have been processed yet (before receiving the `REPLCONF GETACK` command)\n  - The master then sends `REPLCONF GETACK *` again.\n      - The replica should respond with `REPLCONF ACK 37`.\n      - The returned offset is 37 since the first `REPLCONF GETACK` command was processed, and it was 37 bytes long.\n      - The RESP encoding for the `REPLCONF GETACK` command looks like this: ``*3\\r\\n$8\\r\\nreplconf\\r\\n$6\\r\\ngetack\\r\\n$1\\r\\n*\\r\\n` (that's 37 bytes long)\n  - The master then sends a `PING` command to the replica (masters do this periodically to notify replicas that the master is still alive).\n      - The replica must silently process the `PING` command and update its offset. It should not send a response back to the master.\n  - The master then sends `REPLCONF GETACK *` again (this is the third REPLCONF GETACK command received by the replica)\n      - The replica should respond with `REPLCONF ACK 88`.\n      - The returned offset is 88 (37 + 37 + 14)\n          - 37 for the first `REPLCONF GETACK` command\n          - 37 for the second `REPLCONF GETACK` command\n          - 14 for the `PING` command\n      - Note that the third `REPLCONF GETACK` command is not included in the offset, since the value should\n      only include the number of bytes of commands processed **before** receiving the current `REPLCONF GETACK` command.\n  - ... and so on\n\n</details>\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port <PORT> --replicaof \"<HOST> <PORT>\"\n```\n\nJust like in the previous stages, your replica should complete the handshake with the master and receive an empty RDB file.\n\nThe master will then propagate a series of commands to your replica. These commands will be interleaved with `REPLCONF GETACK *` commands.\n\n```bash\nREPLCONF getack * # expecting REPLCONF ACK 0, since 0 bytes have been processed\n\nping # master sending a ping command to notify the replica that it's still alive\nREPLCONF getack * # expecting REPLCONF ACK 51 (37 for the first REPLCONF command + 14 for the ping command)\n\nset foo 1 # propagated from master to replica\nset bar 2 # propagated from master to replica\nREPLCONF getack * # expecting REPLCONF ACK 109 (51 + 29 for the first set command + 29 for the second set command)\n```\n\n### Notes\n\n- The offset should only include the number of bytes of commands processed **before** receiving the current `REPLCONF GETACK` command.\n- Although masters don't propagate `PING` commands when received from clients (since they aren't \"write\" commands),\n  they may send `PING` commands to replicas to notify replicas that the master is still alive.\n- Replicas should update their offset to account for **all** commands propagated from the master, including `PING` and `REPLCONF` itself.\n- The response should be encoded as a [RESP Array](https://redis.io/docs/reference/protocol-spec/#arrays), like\n  this: `*3\\r\\n$8\\r\\nREPLCONF\\r\\n$3\\r\\nACK\\r\\n$3\\r\\n154\\r\\n`.\n",
      "marketing_md": "In this stage, you'll add support for returning an ACK back to master as a response to GETACK.\n"
    },
    {
      "slug": "my8",
      "primary_extension_slug": "replication",
      "name": "WAIT with no replicas",
      "difficulty": "medium",
      "description_md": "**🚧 We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\n<!--\nIn the next 3 stages, you will implement the WAIT command on your master.\nThe WAIT command is used to find out how many replicas a write command was propagated to, with the replica ACKing it back. This way we can know how durable the write was. As we haven't implemented periodic ACKs from the replica, in this stage, for WAIT, the master has to send a GETACK to the replica, if the replica replies back with the proper offset, before the WAIT expires, the master can count that replica's write to be a success.\n\nIn this stage you will implement WAIT, when exactly 0 replicas are connected to Master. The Master can just return 0 asap. This way we will gently dive into the implementation.\n-->\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh\n```\n\nA redis client will then connect to your master and send `WAIT 0 60000`:\n\n```bash\n$ redis-cli WAIT 0 60000\n```\n\nIt'll expect to receive `0` back immediately, since no replicas are connected.\n\n### Notes\n\n- You can hardcode `0` as the response for the WAIT command in this stage. We'll get to tracking the number of replicas and responding\n  accordingly in the next stages.\n",
      "marketing_md": "In this stage, you'll start implementing the WAIT command on your master.\n"
    },
    {
      "slug": "tu8",
      "primary_extension_slug": "replication",
      "name": "WAIT with no commands",
      "difficulty": "medium",
      "description_md": "**🚧 We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\n<!--\n\nIn this stage you will implement WAIT, when some replicas are connected to Master, but there have been NO commands propagated from master to replica. So offset is essentially 0. In this case, the Master can just return the count of `connected_slaves` asap.  (The replicas will finish the sync handshake with Master, so they are actually connnected.)\n(The master will return the count of `connected_slaves` no matter how many replicas we pass in the WAIT command parameter. As the offset is 0, it knows all replicas are in sync.)\n\n-->\n\n### Tests\n\nThe tester will execute your program as a master like this:\n\n```\n./your_program.sh\n```\n\nIt'll then start **multiple** replicas that connect to your server. Each will complete the handshake and expect to receive an empty RDB file.\n\nIt'll then connect to your master as a Redis client (not one of the replicas) and send commands like this:\n\n```bash\n$ redis-cli WAIT 3 500 # (expecting 7 back)\n$ redis-cli WAIT 7 500 # (expecting 7 back)\n$ redis-cli WAIT 9 500 # (expecting 7 back)\n```\n\nThe response to each of these commands should be encoded as a RESP integer (i.e. `:7\\r\\n`).\n\n### Notes\n\n- Even if WAIT is called with a number lesser than the number of connected replicas, the master should return the count of connected replicas.\n- The number of replicas created in this stage will be random, so you can't hardcode `7` as the response like in the example above.\n",
      "marketing_md": "In this stage, you'll continue implementing the WAIT command on your master.\n"
    },
    {
      "slug": "na2",
      "primary_extension_slug": "replication",
      "name": "WAIT with multiple commands",
      "difficulty": "hard",
      "description_md": "**🚧 We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\n<!--\nIn this stage you will implement WAIT, when some replicas are connected to Master, and there have been commands propagated from master to replica. So the offset is NOT 0. In this case, the Master has to figure out how many replicas the previous write command has been successfully propagated to.\n(The replicas will finish the sync handshake with Master, and process any commands you send it, but they WON'T send periodic ACKs, so you need to basically send a REPLCONF GETACK to get their current offset. )\n-->\n\n### Tests\n\nThe tester will execute your program as a master like this:\n\n```\n./your_program.sh\n```\n\nIt'll then start **multiple** replicas that connect to your server. Each will complete the handshake and expect to receive an empty RDB file.\n\nThe tester will then connect to your master as a Redis client (not one of the replicas) and send multiple write commands interleaved\nwith `WAIT` commands:\n\n```bash\n$ redis-cli SET foo 123\n$ redis-cli WAIT 1 500 # (must wait until either 1 replica has processed previous commands or 500ms have passed)\n\n$ redis-cli SET bar 456\n$ redis-cli WAIT 2 500 # (must wait until either 2 replicas have processed previous commands or 500ms have passed)\n```\n\n### Notes\n\n- The `WAIT` command should return when either (a) the specified number of replicas have acknowledged the command, or (b) the timeout expires.\n- The `WAIT` command should always return the number of replicas that have acknowledged the command, even if the timeout expires.\n- The returned number of replicas might be lesser than or greater than the expected number of replicas specified in the `WAIT` command.\n",
      "marketing_md": "In this stage, you'll finish implementing the WAIT command on your master.\n"
    },
    {
      "slug": "cc3",
      "primary_extension_slug": "streams",
      "name": "The TYPE command",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for the `TYPE` command.\n\n### The TYPE command\n\nThe [TYPE](https://redis.io/commands/type/) command returns the type of value stored at a given key.\n\nIt returns one of the following types: string, list, set, zset, hash, and stream.\n\nHere's how it works:\n\n```bash\n$ redis-cli SET some_key foo\n\"OK\"\n$ redis-cli TYPE some_key\n\"string\"\n```\n\nIf a key doesn't exist, the return value will be \"none\".\n\n```bash\n$ redis-cli TYPE missing_key\n\"none\"\n```\n\nThe return value is encoded as a [simple string](https://redis.io/docs/reference/protocol-spec/#simple-strings).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send a `SET` command to your server.\n\n```bash\n$ redis-cli SET some_key foo\n```\n\nIt'll then send a `TYPE` command to your server.\n\n```bash\n$ redis-cli TYPE some_key\n```\n\nYour server should respond with `+string\\r\\n`, which is `string` encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#simple-strings).\n\nIt'll then send another `TYPE` command with a missing key.\n\n```bash\n$ redis-cli TYPE missing_key\n```\n\nYour server should respond with `+none\\r\\n`, which is `none` encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#simple-strings).\n\n### Notes\n\n- For now, you only need to handle the \"string\" and \"none\" types. We'll add support for the \"stream\" type in the next stage.\n",
      "marketing_md": "In this stage, you'll add support for the `TYPE` command.\n"
    },
    {
      "slug": "cf6",
      "primary_extension_slug": "streams",
      "name": "Create a stream",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for creating a [Redis stream](https://redis.io/docs/data-types/streams/) using the `XADD` command.\n\n### Redis Streams & Entries\n\nStreams are one of the data types that Redis supports. A stream is identified by a key, and it contains multiple entries.\n\nEach entry consists of one or more key-value pairs, and is assigned a unique ID.\n\nFor example, if you were using a Redis stream to store real-time data from a temperature & humidity monitor, the contents of the stream might look like this:\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\nWe'll take a closer look at the format of entry IDs (`1526985054069-0` and `1526985054079-0` in the example above) in the upcoming stages.\n\n### The XADD command\n\nThe [XADD](https://redis.io/commands/xadd/) command appends an entry to a stream. If a stream doesn't exist already, it is created.\n\nHere's how it works:\n\n```bash\n$ redis-cli XADD stream_key 1526919030474-0 temperature 36 humidity 95\n\"1526919030474-0\" # (ID of the entry created)\n```\n\nThe return value is the ID of the entry created, encoded as a [bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings).\n\n`XADD` supports other optional arguments, but we won't deal with them in this challenge.\n\n`XADD` also supports auto-generating entry IDs. We'll add support for that in later stages. For now, we'll only deal with\nexplicit IDs (like `1526919030474-0` in the example above).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send an `XADD` command to your server and expect the ID as a response.\n\n```bash\n$ redis-cli XADD stream_key 0-1 foo bar\n\"0-1\"\n```\n\nYour server should respond with `$3\\r\\n0-1\\r\\n`, which is `0-1` encoded as a [RESP bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings).\n\nThe tester will then send a `TYPE` command to your server.\n\n```bash\n$ redis-cli TYPE stream_key\n\"stream\"\n```\n\nYour server should respond with `+stream\\r\\n`, which is `stream` encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#simple-strings).\n\n### Notes\n\n- You still need to handle the \"string\" and \"none\" return values for the `TYPE` command. \"stream\" should only be returned for keys that are streams.\n",
      "marketing_md": "In this stage, you'll add support for creating a [Redis stream](https://redis.io/docs/data-types/streams/) using the `XADD` command.\n"
    },
    {
      "slug": "hq8",
      "primary_extension_slug": "streams",
      "name": "Validating entry IDs",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for validating entry IDs to the `XADD` command.\n\n### Entry IDs\n\nHere's an example of stream entries from the previous stage:\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\nEntry IDs are always composed of two integers: `<millisecondsTime>-<sequenceNumber>`.\n\nEntry IDs are unique within a stream, and they're guaranteed to be incremental - i.e. an\nentry added later will always have an ID greater than an entry added in the past. More\non this in the next section.\n\n### Specifying entry IDs in XADD\n\nThere are multiple formats in which the ID can be specified in the XADD command:\n\n- Explicit (\"1526919030474-0\") (**This stage**)\n- Auto-generate only sequence number (\"1526919030474-*\") (Next stages)\n- Auto-generate time part and sequence number (\"*\") (Next stages)\n\nIn this stage, we'll only deal with explicit IDs. We'll add support for the other two cases in the next stages.\n\nYour XADD implementation should validate the ID passed in.\n\n- The ID should be greater than the ID of the last entry in the stream.\n  - The `millisecondsTime` part of the ID should be greater than or equal to the `millisecondsTime` of the last entry.\n  - If the `millisecondsTime` part of the ID is equal to the `millisecondsTime` of the last entry, the `sequenceNumber` part of the ID should be greater than the `sequenceNumber` of the last entry.\n- If the stream is empty, the ID should be greater than `0-0`\n\nHere's an example of adding an entry with a valid ID followed by an invalid ID:\n\n```bash\n$ redis-cli XADD some_key 1-1 foo bar\n\"1-1\"\n$ redis-cli XADD some_key 1-1 bar baz\n(error) ERR The ID specified in XADD is equal or smaller than the target stream top item\n```\n\nHere's another such example:\n\n```bash\n$ redis-cli XADD some_key 1-1 foo bar\n\"1-1\"\n$ redis-cli XADD some_key 0-2 bar baz\n(error) ERR The ID specified in XADD is equal or smaller than the target stream top item\n```\n\nThe minimum entry ID that Redis supports is 0-1. Passing in an ID lower than should result in an error.\n\n```bash\n$ redis-cli XADD some_key 0-0 bar baz\n(error) ERR The ID specified in XADD must be greater than 0-0\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll create a few entries usind `XADD`.\n\n```bash\n$ redis-cli XADD stream_key 1-1 foo bar\n\"1-1\"\n$ redis-cli XADD stream_key 1-2 bar baz\n\"1-2\"\n```\n\nIt'll send another `XADD` command with the same time and sequence number as the last entry.\n\n```bash\n$ redis-cli XADD stream_key 1-2 baz foo\n(error) ERR The ID specified in XADD is equal or smaller than the target stream top item\n```\n\nYour server should respond with \"-ERR The ID specified in XADD is equal or smaller than the target stream top item\\r\\n\", which is the error message above encoded as a\n[simple error](https://redis.io/docs/reference/protocol-spec/#simple-errors).\n\nThe tester will then send another `XADD` command with a smaller value for the time and a larger value for the sequence number.\n\n```bash\n$ redis-cli XADD stream_key 0-3 baz foo\n(error) ERR The ID specified in XADD is equal or smaller than the target stream top item\n```\n\nYour server should also respond with the same error message.\n\nAfter that, the tester will send another `XADD` command with `0-0` as the ID.\n\n```bash\n$ redis-cli XADD stream_key 0-0 baz foo\n```\n\nYour server should respond with \"-ERR The ID specified in XADD must be greater than 0-0\\r\\n\", which is the error message above encoded as a\n[RESP simple error](https://redis.io/docs/reference/protocol-spec/#simple-errors).\n",
      "marketing_md": "In this stage, you'll enhance the `XADD` command by extending support for explicit IDs.\n"
    },
    {
      "slug": "yh3",
      "primary_extension_slug": "streams",
      "name": "Partially auto-generated IDs",
      "difficulty": "medium",
      "description_md": "In this stage, you'll extend your `XADD` command implementation to support auto-generating the\nsequence number part of the entry ID.\n\n### Specifying entry IDs in XADD\n\nAs a recap, there are multiple formats in which the ID can be specified in the `XADD` command:\n\n- Explicit (\"1526919030473-0\") (Previous stage)\n- Auto-generate only sequence number (\"1526919030474-*\") (**This stage**)\n- Auto-generate time part and sequence number (\"*\") (Next stage)\n\nWe dealt with explicit IDs in the last stage. We'll handle the second case in this stage.\n\nWhen `*` is used for the sequence number, Redis picks the last sequence number used in the\nstream (for the same time part) and increments it by 1.\n\nThe default sequence number is 0. The only exception is when the time part is also 0. In that case, the default sequence number is 1.\n\nHere's an example of adding an entry with `*` as the sequence number:\n\n```bash\n$ redis-cli XADD some_key \"1-*\" foo bar\n\"1-0\" # If there are no entries, the sequence number will be 0\n$ redis-cli XADD some_key \"1-*\" bar baz\n\"1-1\" # Adding another entry will increment the sequence number\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll send an `XADD` command with `*` as the sequence number.\n\n```bash\n$ redis-cli XADD stream_key 0-* foo bar\n```\n\nYour server should respond with `$3\\r\\n0-1\\r\\n`, which is `0-1` encoded as a RESP bulk string.\n\nIt'll then send another `XADD` command with `*` as the sequence number, but this time with a\nrandom number as the time part.\n\n```bash\n$ redis-cli XADD stream_key 5-* foo bar\n```\n\nYour server should respond with `$3\\r\\n5-0\\r\\n`, which is `5-0` encoded as a [RESP bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings)\n\nIt'll send the same command again.\n\n```bash\n$ redis-cli XADD stream_key 5-* bar baz\n```\n\nYour server should respond with `$3\\r\\n5-1\\r\\n`, which is `5-1` encoded as a [RESP bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings)\n\n### Notes\n\n- The tester will use a random number for the time part (we use `5` in the example above).\n",
      "marketing_md": "In this stage, you'll enhance the `XADD` command by adding the option to use `*` as the sequence number.\n"
    },
    {
      "slug": "xu6",
      "primary_extension_slug": "streams",
      "name": "Fully auto-generated IDs",
      "difficulty": "medium",
      "description_md": "In this stage, you'll extend your `XADD` command implementation to support auto-generating entry IDs.\n\n### Specifying entry IDs in XADD (Continued...)\n\nAs a recap, there are multiple formats in which the ID can be specified in the `XADD` command:\n\n- Explicit (\"1526919030474-0\") (Previous stages)\n- Auto-generate only sequence number (\"1526919030473-*\") (Previous stages)\n- Auto-generate time part and sequence number (\"*\") (**This stage**)\n\nWe'll now handle the third case.\n\nWhen `*` is used with the `XADD` command, Redis auto-generates a unique auto-incrementing ID for the message being appended to the stream.\n\nRedis defaults to using the current unix time in milliseconds for the time part and 0 for the sequence number. If the\ntime already exists in the stream, the sequence number for that record incremented by one will be used.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then create an entry with `*` as the ID.\n\n```bash\n$ redis-cli XADD stream_key * foo bar\n```\n\nYour server should respond with a string like `$15\\r\\n1526919030474-0\\r\\n`, which is `1526919030474-0` encoded as a RESP bulk string.\n\n### Notes\n\n- The time part of the ID should be the current unix time in **milliseconds**, not seconds.\n- The tester doesn't test the case where a time part already exists in the stream and the sequence\n  number is incremented. This is difficult to test reliably since we'd need to send 2 commands within the same millisecond.\n",
      "marketing_md": "In this stage, you'll enhance the `XADD` command by adding the option to use `*` as the entry ID.\n"
    },
    {
      "slug": "zx1",
      "primary_extension_slug": "streams",
      "name": "Query entries from stream",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for querying data from a stream using the `XRANGE` command.\n\n### The XRANGE command\n\nThe [XRANGE](https://redis.io/commands/xrange/) command retrieves a range of entries from a stream.\n\nIt takes two arguments: `start` and `end`. Both are entry IDs. The command returns all entries in the\nstream with IDs between the `start` and `end` IDs. This range is \"inclusive\", which means that the response\nwill includes entries with IDs that are equal to the `start` and `end` IDs.\n\nHere's an example of how it works:\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\" # (ID of the first added entry)\n$ redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n$ redis-cli XRANGE some_key 1526985054069 1526985054079\n1) 1) 1526985054069-0\n   2) 1) temperature\n      2) 36\n      3) humidity\n      4) 95\n2) 1) 1526985054079-0\n   2) 1) temperature\n      2) 37\n      3) humidity\n      4) 94\n```\n\nThe sequence number doesn't need to be included in the start and end IDs provided to the command. If not provided,\nXRANGE defaults to a sequence number of 0 for the start and the maximum sequence number for the end.\n\nThe return value of the command is not exactly what is shown in the example above. This is already formatted by redis-cli.\n\nThe actual return value is a [RESP Array](https://redis.io/docs/reference/protocol-spec/#arrays) of arrays.\n\n- Each inner array represents an entry.\n- The first item in the inner array is the ID of the entry.\n- The second item is a list of key value pairs, where the key value pairs are represented as a list of strings.\n  - The key value pairs are in the order they were added to the entry.\n\nThe return value of the example above is actually something like this:\n\n```json\n[\n  [\n    \"1526985054069-0\",\n    [\n      \"temperature\",\n      \"36\",\n      \"humidity\",\n      \"95\"\n    ]\n  ],\n  [\n    \"1526985054079-0\",\n    [\n      \"temperature\",\n      \"37\",\n      \"humidity\",\n      \"94\"\n    ]\n  ],\n]\n```\n\nWhen encoded as a RESP list, it looks like this:\n\n```text\n*2\\r\\n\n*2\\r\\n\n$15\\r\\n1526985054069-0\\r\\n\n*4\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n36\\r\\n\n$8\\r\\nhumidity\\r\\n\n$2\\r\\n95\\r\\n\n*2\\r\\n\n$15\\r\\n1526985054079-0\\r\\n\n*4\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n37\\r\\n\n$8\\r\\nhumidity\\r\\n\n$2\\r\\n94\\r\\n\n```\n\nIn the code block above, the response is separated into multiple lines for readability. The actual\nreturn value doesn't contain any additional newlines.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, it'll add a few entries.\n\n```bash\n$ redis-cli XADD stream_key 0-1 foo bar\n\"0-1\"\n$ redis-cli XADD stream_key 0-2 bar baz\n\"0-2\"\n$ redis-cli XADD stream_key 0-3 baz foo\n\"0-3\"\n```\n\nThen, it'll send an `XRANGE` command to your server.\n\n```bash\n$ redis-cli XRANGE stream_key 0-2 0-3\n```\n\nYour server should respond with the following (encoded as a RESP Array):\n\n```json\n[\n  [\n    \"0-2\",\n    [\n      \"bar\",\n      \"baz\"\n    ]\n  ],\n  [\n    \"0-3\",\n    [\n      \"baz\",\n      \"foo\"\n    ]\n  ]\n]\n```\n",
      "marketing_md": "In this stage, you'll add support for querying data from a stream using the `XRANGE` command.\n"
    },
    {
      "slug": "yp1",
      "primary_extension_slug": "streams",
      "name": "Query with -",
      "difficulty": "easy",
      "description_md": "In this stage, you'll extend support for `XRANGE` to allow querying using `-`.\n\n### Using XRANGE with -\n\nIn the previous stage, we saw that `XRANGE` takes `start` and `end` as arguments.\n\nIn addition to accepting an explicit entry ID, `start` can also be specified as `-`. When `-` is used, `XRANGE` retrieves entries from the beginning of the stream.\n\nHere's an example of how that works.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n$ redis-cli XRANGE some_key - 1526985054079\n1) 1) 1526985054069-0\n   2) 1) temperature\n      2) 36\n      3) humidity\n      4) 95\n2) 1) 1526985054079-0\n   2) 1) temperature\n      2) 37\n      3) humidity\n      4) 94\n```\n\nIn the example above, `XRANGE` retrieves all entries from the beginning of the stream to the entry with ID `1526985054079-0`.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then create a few entries.\n\n```bash\n$ redis-cli XADD stream_key 0-1 foo bar\n\"0-1\"\n$ redis-cli XADD stream_key 0-2 bar baz\n\"0-2\"\n$ redis-cli XADD stream_key 0-3 baz foo\n\"0-3\"\n```\n\nIt'll then send an `XRANGE` command to your server.\n\n```bash\n$ redis-cli XRANGE stream_key - 0-2\n1) 1) 0-1\n   2) 1) foo\n      2) bar\n2) 1) 0-2\n   2) 1) bar\n      2) baz\n```\n\nYour server should respond with the following, encoded as a [RESP Array](https://redis.io/docs/reference/protocol-spec/#arrays):\n\n```json\n[\n  [\n    \"0-1\",\n    [\n      \"foo\",\n      \"bar\"\n    ]\n  ],\n  [\n    \"0-2\",\n    [\n      \"bar\",\n      \"baz\"\n    ]\n  ]\n]\n```\n",
      "marketing_md": "In this stage, you'll extend support for `XRANGE` to allow querying using `-`.\n"
    },
    {
      "slug": "fs1",
      "primary_extension_slug": "streams",
      "name": "Query with +",
      "difficulty": "easy",
      "description_md": "In this stage, you'll extend support for `XRANGE` to allow querying using `+`.\n\n### Using XRANGE with +\n\nIn the previous stage, we saw that `XRANGE` takes `start` and `end` as arguments.\n\nIn addition to accepting an explicit entry ID, `end` can also be specified as `+`. When `+` is used, `XRANGE` retrieves entries until the end of the stream.\n\nHere's an example of how that works.\n\nWe'll use our previous example for entries existing in a stream.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n$ redis-cli XRANGE some_key 1526985054069 +\n1) 1) 1526985054069-0\n   2) 1) temperature\n      2) 36\n      3) humidity\n      4) 95\n2) 1) 1526985054079-0\n   2) 1) temperature\n      2) 37\n      3) humidity\n      4) 94\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then create a few entries.\n\n```bash\n$ redis-cli XADD stream_key 0-1 foo bar\n$ redis-cli XADD stream_key 0-2 bar baz\n$ redis-cli XADD stream_key 0-3 baz foo\n```\n\nIt'll then send an `XRANGE` command to your server.\n\n```bash\n$ redis-cli XRANGE stream_key 0-2 +\n```\n\nYour server should respond with the following:\n\n```text\n*2\\r\\n\n*2\\r\\n\n$3\\r\\n0-2\\r\\n\n*2\\r\\n\n$3\\r\\nbar\\r\\n\n$3\\r\\nbaz\\r\\n\n*2\\r\\n\n$3\\r\\n0-3\\r\\n\n*2\\r\\n\n$3\\r\\nbaz\\r\\n\n$3\\r\\nfoo\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"0-2\",\n    [\n      \"bar\",\n      \"baz\"\n    ]\n  ],\n  [\n    \"0-3\",\n    [\n      \"baz\",\n      \"foo\"\n    ]\n  ]\n]\n```\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n",
      "marketing_md": "In this stage, you'll extend support for `XRANGE` to allow querying using `+`.\n"
    },
    {
      "slug": "um0",
      "primary_extension_slug": "streams",
      "name": "Query single stream using XREAD",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support to querying a stream using the `XREAD` command.\n\n### The XREAD command\n\n[XREAD](https://redis.io/commands/xread/) is used to read data from one or more streams, starting from a specified entry ID.\n\nHere's how it works.\n\nLet's use the entries previously shown as an example.\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n$ redis-cli XREAD streams some_key 1526985054069-0\n1) 1) \"some_key\"\n   2) 1) 1) 1526985054079-0\n         2) 1) temperature\n            2) 37\n            3) humidity\n            4) 94\n```\n\n`XREAD` is somewhat similar to `XRANGE`. The primary difference is that `XREAD` only takes a single argument and not a start-end pair.\n\nAnother difference is that `XREAD` is exclusive. This means that only entries with the ID greater than what was provided will be included in the response.\n\nAnother difference is the return type. `XREAD` returns an array where each element is an array composed of two elements, which are the ID and the list of fields and values.\n\nHere's what the response in the example above actually looks like:\n\n```json\n[\n  [\n    \"some_key\",\n    [\n      [\n        \"1526985054079-0\",\n        [\n          \"temperature\",\n          \"37\",\n          \"humidity\",\n          \"94\"\n        ]\n      ]\n    ]\n  ]\n]\n```\n\nWhen encoded as RESP, it looks like this:\n\n```text\n*1\\r\\n\n*2\\r\\n\n$8\\r\\nsome_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$15\\r\\n1526985054079-0\\r\\n\n*4\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n37\\r\\n\n$8\\r\\nhumidity\\r\\n\n$2\\r\\n94\\r\\n\n```\n\nThe lines are separated into new lines for readability. The return value is just one line.\n\n`XREAD` supports other optional arguments, but we won't deal with them right now.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, an entry will be added.\n\n```bash\n$ redis-cli XADD stream_key 0-1 temperature 96\n```\n\nIt'll then send an `XREAD` command to your server.\n\n```bash\n$ redis-cli XREAD streams stream_key 0-0\n```\n\nYour server should respond with the following:\n\n```text\n*1\\r\\n\n*2\\r\\n\n$10\\r\\nstream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-1\\r\\n\n*2\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n96\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"stream_key\",\n    [\n      [\n        \"0-1\",\n        [\n          \"temperature\",\n          \"96\"\n        ]\n      ]\n    ]\n  ]\n]\n```\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n",
      "marketing_md": "In this stage, you'll add support to querying a stream using the `XREAD` command.\n"
    },
    {
      "slug": "ru9",
      "primary_extension_slug": "streams",
      "name": "Query multiple streams using XREAD",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add extend support to `XREAD` to allow querying multiple streams.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, an entry will be added to a couple of streams.\n\n```bash\n$ redis-cli XADD stream_key 0-1 temperature 95\n$ redis-cli XADD other_stream_key 0-2 humidity 97\n```\n\nIt'll then send an `XREAD` command to your server with multiple streams.\n\n```bash\n$ redis-cli XREAD streams stream_key other_stream_key 0-0 0-1\n```\n\nYour server should respond with the following:\n\n```text\n*2\\r\\n\n*2\\r\\n\n$10\\r\\nstream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-1\\r\\n\n*2\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n95\\r\\n\n*2\\r\\n\n$16\\r\\nother_stream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-2\\r\\n\n*2\\r\\n\n$8\\r\\nhumidity\\r\\n\n$2\\r\\n97\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"stream_key\",\n    [\n      [\n        \"0-1\",\n        [\n          \"temperature\",\n          \"95\"\n        ]\n      ]\n    ]\n  ],\n  [\n    \"other_stream_key\",\n    [\n      [\n        \"0-2\",\n        [\n          \"humidity\",\n          \"97\"\n        ]\n      ]\n    ]\n  ]\n]\n```\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n",
      "marketing_md": "In this stage, you'll add extend support to `XREAD` to allow querying multiple streams.\n"
    },
    {
      "slug": "bs1",
      "primary_extension_slug": "streams",
      "name": "Blocking reads",
      "difficulty": "hard",
      "description_md": "In this stage, you'll extend support to `XREAD` to allow for turning it into a blocking command.\n\n### Understanding blocking\n\n`BLOCK` is one of the optional parameters that could be passed in to the `XREAD` command.\n\nWithout blocking, the current implementation of our command is synchronous. This means that the command can get new data as long as there are items available.\n\nIf we want to wait for new data coming in, we need blocking.\n\nHere's how it works.\n\nLet's use the entries previously shown as an example.\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\nOn one instance of the redis-cli, we'd add an entry and send  a blocking `XREAD` command.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key 1526985054069-0\n```\n\nThen, on another instance of the redis-cli, we add another entry.\n\n```bash\n$ other-redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n```\n\nIf the command was sent within 1000 milliseconds, the redis-cli will respond with the added entry.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key 1526985054069-0\n1) 1) \"some_key\"\n   2) 1) 1) 1526985054079-0\n         2) 1) temperature\n            2) 37\n            3) humidity\n            4) 94\n```\n\nIf not, the response would be a null representation of a bulk string.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key 1526985054069-0\n(nil)\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, an entry will be added to a stream.\n\n```bash\n$ redis-cli XADD stream_key 0-1 temperature 96\n```\n\nIt'll then send an `XREAD` command to your server with the `BLOCK` command.\n\n```bash\n$ redis-cli XREAD block 1000 streams stream_key 0-1\n```\n\nOn another instance of the redis-cli, another entry will be added in 500 milliseconds after sending the `XREAD` command.\n\n```bash\n$ redis-cli XADD stream_key 0-2 temperature 95\n```\n\nYour server should respond with the following:\n\n```text\n*1\\r\\n\n*2\\r\\n\n$10\\r\\stream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-2\\r\\n\n*2\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n96\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"stream_key\",\n    [\n      [\n        \"0-2\",\n        [\n          \"temperature\",\n          \"96\"\n        ]\n      ]\n    ]\n  ]\n]\n```\n\nIt'll send another `XREAD` command to your server with the `BLOCK` command but this time, it'll wait for 1000 milliseconds before checking the response of your server.\n\n```bash\n$ redis-cli XREAD block 1000 streams stream_key 0-2\n```\n\nYour server should respond with `$-1\\r\\n` which is a `null` representation of a RESP bulk string.\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n",
      "marketing_md": "In this stage, you'll add extend support to `XREAD` to allow querying multiple streams.\n"
    },
    {
      "slug": "hw1",
      "primary_extension_slug": "streams",
      "name": "Blocking reads without timeout",
      "difficulty": "medium",
      "description_md": "In this stage, you'll extend support to `XREAD` to allow for the blocking command not timing out.\n\n### Understanding blocking without timeout\n\nHere's how it works.\n\nLet's use the entries previously shown as an example.\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\nOn one instance of the redis-cli, we'd add an entry and send a blocking `XREAD` command with 0 as the time passed in.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 0 streams some_key 1526985054069-0\n```\n\nThen, on another instance of the redis-cli, we add another entry.\n\n```bash\n$ other-redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n```\n\nThe difference now is that the first instance of the redis-cli doesn't time out and responds with null no matter how much time passes. It will wait until another entry is added. The return value after an entry is added is similar to the last stage.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 0 streams some_key 1526985054069-0\n1) 1) \"some_key\"\n   2) 1) 1) 1526985054079-0\n         2) 1) temperature\n            2) 37\n            3) humidity\n            4) 94\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, an entry will be added to a stream.\n\n```bash\n$ redis-cli XADD stream_key 0-1 temperature 96\n```\n\nIt'll then send an `XREAD` command to your server with the `BLOCK` command with the time passed in being 0.\n\n```bash\n$ redis-cli XREAD block 0 streams stream_key 0-1\n```\n\nIt'll then wait for 1000 milliseconds before checking if there is a response. Your server should not have a new response. It'll then add another entry.\n\n```bash\n$ redis-cli XADD stream_key 0-2 temperature 95\n```\n\nYour server should respond with the following:\n\n```text\n*1\\r\\n\n*2\\r\\n\n$10\\r\\stream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-2\\r\\n\n*2\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n95\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"stream_key\",\n    [\n      [\n        \"0-2\",\n        [\n          \"temperature\",\n          \"95\"\n        ]\n      ]\n    ]\n  ]\n]\n```\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n",
      "marketing_md": "In this stage, you'll add extend support to `XREAD` to allow for the blocking command not timing out.\n"
    },
    {
      "slug": "xu1",
      "primary_extension_slug": "streams",
      "name": "Blocking reads using $",
      "difficulty": "easy",
      "description_md": "In this stage, you'll extend support to `XREAD` to allow for passing in `$` as the ID for a blocking command.\n\n### Understanding $\n\nUsing `$` as the ID passed to a blocking `XREAD` command signals that we only want new entries. This is similar to passing in the maximum ID we currently have in the stream.\n\nHere's how it works.\n\nLet's use the entries previously shown as an example.\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\nOn one instance of the redis-cli, we'd add an entry and send a blocking `XREAD` command with `1000` as the time passed in and `$` as the id passed in.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key $\n```\n\nThen, on another instance of the redis-cli, we add another entry.\n\n```bash\n$ other-redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n```\n\nSimilar to the behavior detailed in the earlier stages, if the command was sent within 1000 milliseconds, the redis-cli will respond with the new entry.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key 1526985054069-0\n1) 1) \"some_key\"\n   2) 1) 1) 1526985054079-0\n         2) 1) temperature\n            2) 37\n            3) humidity\n            4) 94\n```\n\nIf not, the return type would still be a null representation of a bulk string.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key 1526985054069-0\n(nil)\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, an entry will be added to a stream.\n\n```bash\n$ redis-cli XADD stream_key 0-1 temperature 96\n```\n\nIt'll then send an `XREAD` command to your server with the `BLOCK` command with `0` as the time and `$` as the ID.\n\n```bash\n$ redis-cli XREAD block 0 streams stream_key $\n```\n\nOn another instance of the redis-cli, another entry will be added in 500 milliseconds after sending the `XREAD` command.\n\n```bash\n$ redis-cli XADD stream_key 0-2 temperature 95\n```\n\nYour server should respond with the following:\n\n```text\n*1\\r\\n\n*2\\r\\n\n$10\\r\\stream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-2\\r\\n\n*2\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n96\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"stream_key\",\n    [\n      [\n        \"0-2\",\n        [\n          \"temperature\",\n          \"95\"\n        ]\n      ]\n    ]\n  ]\n]\n```\n\nIt'll send another `XREAD` command to your server with the `BLOCK` command but this time, it'll wait for 1000 milliseconds before checking the response of your server.\n\n```bash\n$ redis-cli XREAD block 1000 streams stream_key $\n```\n\nYour server should respond with `$-1\\r\\n` which is a `null` representation of a RESP bulk string.\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n",
      "marketing_md": "In this stage, you'll add extend support to `XREAD` to allow for passing in `$` as the ID for a blocking command.\n"
    },
    {
      "slug": "si4",
      "primary_extension_slug": "transactions",
      "name": "The INCR command (1/3)",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for the `INCR` command.\n\n### The INCR command\n\nThe [INCR](https://redis.io/docs/latest/commands/incr/) command is used to increment the value of a key by 1.\n\nExample usage:\n\n```bash\n$ redis-cli SET foo 5\n\"OK\"\n$ redis-cli INCR foo\n(integer) 6\n$ redis-cli INCR foo\n(integer) 7\n```\n\nIf the key doesn't exist, the value will be set to 1.\n\nWe'll split the implementation of this command into three stages:\n\n- Key exists and has a numerical value (**This stage**)\n- Key doesn't exist (later stages)\n- Key exists but doesn't have a numerical value (later stages)\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following commands:\n\n```bash\n$ redis-cli\n> SET foo 41 (expecting \"+OK\" as the response)\n> INCR foo (expecting \":42\\r\\n\" as the response)\n```\n",
      "marketing_md": "In this stage, you'll start implementing the INCR command.\n"
    },
    {
      "slug": "lz8",
      "primary_extension_slug": "transactions",
      "name": "The INCR command (2/3)",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for handling the `INCR` command when a key does not exist.\n\n### Recap\n\nThe implementation of [`INCR`](https://redis.io/docs/latest/commands/incr/) is split into three stages:\n\n- Key exists and has a numerical value (previous stages)\n- Key doesn't exist (**This stage**)\n- Key exists but doesn't have a numerical value (later stages)\n\nWhen a key doesn't exist, `INCR` sets the value to 1. Example:\n\n```bash\n$ redis-cli INCR missing_key\n(integer) 1\n$ redis-cli GET missing_key\n\"1\"\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following commands:\n\n```bash\n$ redis-cli\n> INCR foo (expecting \":1\\r\\n\" as the response)\n> INCR bar (expecting \":1\\r\\n\" as the response)\n```\n\n### Notes\n\n- Your implementation still needs to pass the tests in the previous stage.\n",
      "marketing_md": "In this stage, you'll continue implementing the INCR command.\n"
    },
    {
      "slug": "mk1",
      "primary_extension_slug": "transactions",
      "name": "The INCR command (3/3)",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for handling the `INCR` command when a key exists but doesn't have a numerical value.\n\n### Recap\n\nThe implementation of [`INCR`](https://redis.io/docs/latest/commands/incr/) is split into three stages:\n\n- Key exists and has a numerical value (previous stages)\n- Key doesn't exist (previous stages)\n- Key exists but doesn't have a numerical value (**This stage**)\n\nWhen a key exists but doesn't have a numerical value, `INCR` will return an error. Example:\n\n```bash\n$ redis-cli SET foo xyz\n\"OK\"\n$ redis-cli INCR foo\n(error) ERR value is not an integer or out of range\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following commands:\n\n```bash\n$ redis-cli\n> SET foo xyz (expecting \"+OK\\r\\n\" as the response)\n> INCR foo (expecting \"-ERR value is not an integer or out of range\\r\\n\" as the response)\n```\n",
      "marketing_md": "In this stage, you'll finish implementing the INCR command.\n"
    },
    {
      "slug": "pn0",
      "primary_extension_slug": "transactions",
      "name": "The MULTI command",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for the `MULTI` command.\n\n### The MULTI command\n\nThe [MULTI](https://redis.io/docs/latest/commands/multi/) command starts a transaction.\n\nAfter a `MULTI` command is executed, any further commands from the same connection will be \"queued\" but not executed.\n\nExample usage:\n\n```bash\n$ redis-cli\n> MULTI\nOK\n> SET foo 41\nQUEUED\n> INCR foo\nQUEUED\n```\n\nThe queued commands can be executed using [EXEC](https://redis.io/docs/latest/commands/exec/), which we'll cover in later stages.\n\nIn this stage, you'll just add support for handling the `MULTI` command and returning `+OK\\r\\n`. We'll get to queueing commands in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following command:\n\n```bash\n$ redis-cli MULTI\n```\n\nThe tester will expect `+OK\\r\\n` as the response.\n\n### Notes\n\n- We'll test queueing commands & executing a transaction in later stages.\n",
      "marketing_md": "In this stage, you'll implement the MULTI command.\n"
    },
    {
      "slug": "lo4",
      "primary_extension_slug": "transactions",
      "name": "The EXEC command",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for the `EXEC` command when the `MULTI` command has not been called.\n\n### The EXEC command\n\nThe [EXEC](https://redis.io/docs/latest/commands/exec/) command executes all commands queued in a transaction.\n\nIt returns an array of the responses of the queued commands.\n\nExample usage:\n\n```bash\n$ redis-cli\n> MULTI\nOK\n> SET foo 41\nQUEUED\n> INCR foo\nQUEUED\n> EXEC\n1) OK\n2) (integer) 42\n```\n\n### EXEC without MULTI\n\nIf `EXEC` is executed without having called `MULTI`, it returns an error.\n\nExample usage:\n\n```bash\n$ redis-cli EXEC\n(error) ERR EXEC without MULTI\n```\n\nThe returned value is a [Simple error](https://redis.io/docs/latest/develop/reference/protocol-spec/#simple-errors), the\nexact bytes are `-ERR EXEC without MULTI\\r\\n`.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following commands:\n\n```bash\n$ redis-cli EXEC\n```\n\nThe tester will expect \"-ERR EXEC without MULTI\\r\\n\" as the response.\n\n### Notes\n\n- In this stage you only need to implement `EXEC` when `MULTI` hasn't been called.\n- We'll test handling `EXEC` after `MULTI` in later stages.\n",
      "marketing_md": "In this stage, you'll start implementing the EXEC command.\n"
    },
    {
      "slug": "we1",
      "primary_extension_slug": "transactions",
      "name": "Empty transaction",
      "difficulty": "hard",
      "description_md": "In this stage, you'll add support for executing an empty transaction.\n\n### Empty trasactions\n\nIf [EXEC](https://redis.io/docs/latest/commands/exec/) is executed soon after [MULTI](https://redis.io/docs/latest/commands/multi/),\nit returns an empty array.\n\nThe empty array signifies that no commands were queued, and that the transaction was executed successfully.\n\nExample usage:\n\n```bash\n$ redis-cli\n> MULTI\nOK\n> EXEC\n(empty array)\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following commands:\n\n```bash\n$ redis-cli\n> MULTI (expecting \"+OK\\r\\n\")\n> EXEC (expecting \"*0\\r\\n\" as the response)\n> EXEC (expecting \"-ERR EXEC without MULTI\\r\\n\" as the response)\n```\n",
      "marketing_md": "In this stage, you'll implement an empty transaction.\n"
    },
    {
      "slug": "rs9",
      "primary_extension_slug": "transactions",
      "name": "Queueing commands",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for queuing commands within a transaction.\n\n### Queuing commands\n\nAfter [MULTI](https://redis.io/docs/latest/commands/multi/) is executed, any further commands\nfrom a connection are queued until [EXEC](https://redis.io/docs/latest/commands/exec/) is executed.\n\nThe response to all of these commands is `+QUEUED\\r\\n` (That's `QUEUED` encoded as a [Simple String](https://redis.io/docs/latest/develop/reference/protocol-spec/#simple-strings)).\n\nExample:\n\n```bash\n$ redis-cli\n> MULTI\nOK\n> SET foo 41\nQUEUED\n> INCR foo\nQUEUED\n\n... (and so on, until EXEC is executed)\n```\n\nWhen commands are queued, they should not be executed or alter the database in any way.\n\nIn the example above, until `EXEC` is executed, the key `foo` will not exist.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client, and send multiple commands using the same connection:\n\n```bash\n$ redis-cli\n> MULTI\n> SET foo 41 (expecting \"+QUEUED\\r\\n\")\n> INCR foo (expecting \"+QUEUED\\r\\n\")\n```\n\nSince these commands were only \"queued\", the key `foo` should not exist yet. The tester will verify this by creating\nanother connection and sending this command:\n\n```bash\n$ redis-cli GET foo (expecting `$-1\\r\\n` as the response)\n```\n",
      "marketing_md": "In this stage, you'll implement queueing commands to a transaction.\n"
    },
    {
      "slug": "fy6",
      "primary_extension_slug": "transactions",
      "name": "Executing a transaction",
      "difficulty": "hard",
      "description_md": "In this stage, you'll add support for executing a transaction that contains multiple commands.\n\n### Executing a transaction\n\nWhen the [EXEC](https://redis.io/docs/latest/commands/exec/) command is sent within a transaction,\nall commands queued in that transaction are executed.\n\nThe response to [EXEC](https://redis.io/docs/latest/commands/exec/) is an array of the responses of the queued commands.\n\nExample:\n\n```bash\n$ redis-cli\n> MULTI\nOK\n> SET foo 41\nQUEUED\n> INCR foo\nQUEUED\n> EXEC\n1) OK\n2) (integer) 42\n```\n\nIn the above example, `OK` is the response of the `SET` command, and `42` is the response of the `INCR` command.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client, and send multiple commands using the same connection:\n\n```bash\n$ redis-cli MULTI\n> SET foo 6 (expecting \"+QUEUED\\r\\n\")\n> INCR foo (expecting \"+QUEUED\\r\\n\")\n> INCR bar (expecting \"+QUEUED\\r\\n\")\n> GET bar (expecting \"+QUEUED\\r\\n\")\n> EXEC (expecting an array of responses for the queued commands)\n```\n\nSince the transaction was executed, the key `foo` should exist and have the value `7`.\n\nThe tester will verify this by running a GET command:\n\n```bash\n$ redis-cli GET foo (expecting \"7\" encoded as a bulk string)\n```\n",
      "marketing_md": "In this stage, you'll implement executing a successful transaction.\n"
    },
    {
      "slug": "rl9",
      "primary_extension_slug": "transactions",
      "name": "The DISCARD command",
      "difficulty": "easy",
      "description_md": "In this stage, you'll add support for the DISCARD command.\n\n### The DISCARD command\n\n[DISCARD](https://redis.io/docs/latest/commands/discard/) is used to abort a transactions. It discards all commands queued in a transaction,\nand returns `+OK\\r\\n`.\n\nExample:\n\n```bash\n$ redis-cli\n> MULTI\nOK\n> SET foo 41\nQUEUED\n> DISCARD\nOK\n> DISCARD\n(error) ERR DISCARD without MULTI\n```\n\nIn the above example, note that the first `DISCARD` returns `OK`, but the second `DISCARD` returns an error since the transaction was aborted.\n\n### DISCARD\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client, and send multiple commands using the same connection:\n\n```bash\n$ redis-cli\n> MULTI\n> SET foo 41 (expecting \"+QUEUED\\r\\n\")\n> INCR foo (expecting \"+QUEUED\\r\\n\")\n> DISCARD (expecting \"+OK\\r\\n\")\n> GET foo (expecting \"$-1\\r\\n\" as the response)\n> DISCARD (expecting \"-ERR DISCARD without MULTI\\r\\n\" as the response)\n```\n",
      "marketing_md": "In this stage, you'll implement the DISCARD command.\n"
    },
    {
      "slug": "sg9",
      "primary_extension_slug": "transactions",
      "name": "Failures within transactions",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for handling failures within a transaction.\n\n### Failures within transactions\n\nWhen executing a transaction, if a command fails, the error is captured and returned within the response for `EXEC`. All other commands in\nthe transaction are still executed.\n\nYou can read more about this behaviour [in the official Redis docs](https://redis.io/docs/latest/develop/interact/transactions/#errors-inside-a-transaction).\n\nExample:\n\n```bash\n$ redis-cli\n> MULTI\nOK\n> SET foo xyz\nQUEUED\n> INCR foo\nQUEUED\n> SET bar 7\n> EXEC\n1) OK\n2) (error) ERR value is not an integer or out of range\n3) OK\n```\n\nIn the example above, note that the error for the `INCR` command was returned as the second array element. The third command (`SET bar 7`) was\nstill executed successfully.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client, and send multiple commands using the same connection:\n\n```bash\n$ redis-cli\n> SET foo abc\nOK\n> SET bar 41\nOK\n> MULTI\nOK\n> INCR foo\nQUEUED\n> INCR bar\nQUEUED\n> EXEC\n1) (error) ERR value is not an integer or out of range\n2) (integer) 42\n```\n\nThe expected response for `EXEC` is a [RESP array](https://redis.io/docs/latest/develop/reference/protocol-spec/#arrays) of\nthe responses of the queued commands. The exact bytes will be:\n\n```bash\n*2\\r\\n-ERR value is not an integer or out of range\\r\\n:42\\r\\n\n```\n\nThe tester will also verify that the last command was successfully executed and that the key `bar` exists:\n\n```bash\n$ redis-cli\n> GET foo (expecting \"$3\\r\\nabc\\r\\n\" as the response)\n> GET bar (expecting \"$2\\r\\n42\\r\\n\" as the response)\n```\n\n### Notes\n\n- There are a subset of command failures (like syntax errors) that will cause a transaction to be aborted entirely. We won't\n  cover those in this challenge.\n",
      "marketing_md": "In this stage, you'll implement handling failures while executing a transaction.\n"
    },
    {
      "slug": "jf8",
      "primary_extension_slug": "transactions",
      "name": "Multiple transactions",
      "difficulty": "medium",
      "description_md": "In this stage, you'll add support for multiple concurrent transactions.\n\n### Multiple transactions\n\nThere can be multiple transactions open (i.e. `MULTI` has been called, but `EXEC` has not been called yet) at the same time. Each\ntransaction gets its own command queue.\n\nFor example, say you started transaction 1 from one connection:\n\n```bash\n$ redis-cli\n> MULTI\nOK\n> SET foo 41\nQUEUED\n> INCR foo\nQUEUED\n```\n\nand started transaction 2 from another connection:\n\n```bash\n$ redis-cli\n> MULTI\nOK\n> INCR foo\nQUEUED\n```\n\nIf you then run `EXEC` in transaction 1, you should see the following:\n\n```bash\n> EXEC\n1) OK\n2) (integer) 42\n```\n\n`OK` is the response to `SET foo 41`, and `42` is the response to `INCR foo`.\n\nAnd for transaction 2, running `EXEC` should return:\n\n```bash\n> EXEC\n1) (integer) 43\n```\n\n43 is the response to `INCR foo`. The key `foo` was updated to `42` by transaction 1, and `INCR foo` further increments it to `43`.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as multiple Redis clients, and send multiple commands from each connection:\n\n```bash\n$ redis-cli MULTI\n> INCR foo\n> EXEC\n```\n",
      "marketing_md": "In this stage, you'll implement multiple concurrent transactions.\n"
    }
  ]
}
